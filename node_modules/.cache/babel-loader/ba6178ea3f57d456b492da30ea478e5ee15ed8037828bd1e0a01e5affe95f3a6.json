{"ast":null,"code":"import { ErrorFactory, contains, deepExtend, createSubscribe, isBrowser } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport * as modularAPIs from '@firebase/app';\nimport { _addComponent, deleteApp, _DEFAULT_ENTRY_NAME, _addOrOverwriteComponent, registerVersion } from '@firebase/app';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Global context object for a collection of services using\r\n * a shared authentication state.\r\n *\r\n * marked as internal because it references internal types exported from @firebase/app\r\n * @internal\r\n */\nclass FirebaseAppImpl {\n  constructor(_delegate, firebase) {\n    this._delegate = _delegate;\n    this.firebase = firebase;\n    // add itself to container\n    _addComponent(_delegate, new Component('app-compat', () => this, \"PUBLIC\" /* ComponentType.PUBLIC */));\n    this.container = _delegate.container;\n  }\n  get automaticDataCollectionEnabled() {\n    return this._delegate.automaticDataCollectionEnabled;\n  }\n  set automaticDataCollectionEnabled(val) {\n    this._delegate.automaticDataCollectionEnabled = val;\n  }\n  get name() {\n    return this._delegate.name;\n  }\n  get options() {\n    return this._delegate.options;\n  }\n  delete() {\n    return new Promise(resolve => {\n      this._delegate.checkDestroyed();\n      resolve();\n    }).then(() => {\n      this.firebase.INTERNAL.removeApp(this.name);\n      return deleteApp(this._delegate);\n    });\n  }\n  /**\r\n   * Return a service instance associated with this app (creating it\r\n   * on demand), identified by the passed instanceIdentifier.\r\n   *\r\n   * NOTE: Currently storage and functions are the only ones that are leveraging this\r\n   * functionality. They invoke it by calling:\r\n   *\r\n   * ```javascript\r\n   * firebase.app().storage('STORAGE BUCKET ID')\r\n   * ```\r\n   *\r\n   * The service name is passed to this already\r\n   * @internal\r\n   */\n  _getService(name) {\n    let instanceIdentifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _DEFAULT_ENTRY_NAME;\n    var _a;\n    this._delegate.checkDestroyed();\n    // Initialize instance if InstatiationMode is `EXPLICIT`.\n    const provider = this._delegate.container.getProvider(name);\n    if (!provider.isInitialized() && ((_a = provider.getComponent()) === null || _a === void 0 ? void 0 : _a.instantiationMode) === \"EXPLICIT\" /* InstantiationMode.EXPLICIT */) {\n      provider.initialize();\n    }\n    // getImmediate will always succeed because _getService is only called for registered components.\n    return provider.getImmediate({\n      identifier: instanceIdentifier\n    });\n  }\n  /**\r\n   * Remove a service instance from the cache, so we will create a new instance for this service\r\n   * when people try to get it again.\r\n   *\r\n   * NOTE: currently only firestore uses this functionality to support firestore shutdown.\r\n   *\r\n   * @param name The service name\r\n   * @param instanceIdentifier instance identifier in case multiple instances are allowed\r\n   * @internal\r\n   */\n  _removeServiceInstance(name) {\n    let instanceIdentifier = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _DEFAULT_ENTRY_NAME;\n    this._delegate.container\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    .getProvider(name).clearInstance(instanceIdentifier);\n  }\n  /**\r\n   * @param component the component being added to this app's container\r\n   * @internal\r\n   */\n  _addComponent(component) {\n    _addComponent(this._delegate, component);\n  }\n  _addOrOverwriteComponent(component) {\n    _addOrOverwriteComponent(this._delegate, component);\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,\n      options: this.options\n    };\n  }\n}\n// TODO: investigate why the following needs to be commented out\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\n// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\n//   FirebaseAppImpl.prototype.delete ||\n//   console.log('dc');\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst ERRORS = {\n  [\"no-app\" /* AppError.NO_APP */]: \"No Firebase App '{$appName}' has been created - \" + 'call Firebase App.initializeApp()',\n  [\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */]: 'firebase.{$appName}() takes either no argument or a ' + 'Firebase App instance.'\n};\nconst ERROR_FACTORY = new ErrorFactory('app-compat', 'Firebase', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Because auth can't share code with other components, we attach the utility functions\r\n * in an internal namespace to share code.\r\n * This function return a firebase namespace object without\r\n * any utility functions, so it can be shared between the regular firebaseNamespace and\r\n * the lite version.\r\n */\nfunction createFirebaseNamespaceCore(firebaseAppImpl) {\n  const apps = {};\n  // // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // const components = new Map<string, Component<any>>();\n  // A namespace is a plain JavaScript Object.\n  const namespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    // @ts-ignore\n    __esModule: true,\n    initializeApp: initializeAppCompat,\n    // @ts-ignore\n    app,\n    registerVersion: modularAPIs.registerVersion,\n    setLogLevel: modularAPIs.setLogLevel,\n    onLog: modularAPIs.onLog,\n    // @ts-ignore\n    apps: null,\n    SDK_VERSION: modularAPIs.SDK_VERSION,\n    INTERNAL: {\n      registerComponent: registerComponentCompat,\n      removeApp,\n      useAsService,\n      modularAPIs\n    }\n  };\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  namespace['default'] = namespace;\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n  /**\r\n   * Called by App.delete() - but before any services associated with the App\r\n   * are deleted.\r\n   */\n  function removeApp(name) {\n    delete apps[name];\n  }\n  /**\r\n   * Get the App object for a given name (or DEFAULT).\r\n   */\n  function app(name) {\n    name = name || modularAPIs._DEFAULT_ENTRY_NAME;\n    if (!contains(apps, name)) {\n      throw ERROR_FACTORY.create(\"no-app\" /* AppError.NO_APP */, {\n        appName: name\n      });\n    }\n    return apps[name];\n  }\n  // @ts-ignore\n  app['App'] = firebaseAppImpl;\n  /**\r\n   * Create a new App instance (name must be unique).\r\n   *\r\n   * This function is idempotent. It can be called more than once and return the same instance using the same options and config.\r\n   */\n  function initializeAppCompat(options) {\n    let rawConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const app = modularAPIs.initializeApp(options, rawConfig);\n    if (contains(apps, app.name)) {\n      return apps[app.name];\n    }\n    const appCompat = new firebaseAppImpl(app, namespace);\n    apps[app.name] = appCompat;\n    return appCompat;\n  }\n  /*\r\n   * Return an array of all the non-deleted FirebaseApps.\r\n   */\n  function getApps() {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps).map(name => apps[name]);\n  }\n  function registerComponentCompat(component) {\n    const componentName = component.name;\n    const componentNameWithoutCompat = componentName.replace('-compat', '');\n    if (modularAPIs._registerComponent(component) && component.type === \"PUBLIC\" /* ComponentType.PUBLIC */) {\n      // create service namespace for public components\n      // The Service namespace is an accessor function ...\n      const serviceNamespace = function () {\n        let appArg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : app();\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof appArg[componentNameWithoutCompat] !== 'function') {\n          // Invalid argument.\n          // This happens in the following case: firebase.storage('gs:/')\n          throw ERROR_FACTORY.create(\"invalid-app-argument\" /* AppError.INVALID_APP_ARGUMENT */, {\n            appName: componentName\n          });\n        }\n        // Forward service instance lookup to the FirebaseApp.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return appArg[componentNameWithoutCompat]();\n      };\n      // ... and a container for service-level properties.\n      if (component.serviceProps !== undefined) {\n        deepExtend(serviceNamespace, component.serviceProps);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      namespace[componentNameWithoutCompat] = serviceNamespace;\n      // Patch the FirebaseAppImpl prototype\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      firebaseAppImpl.prototype[componentNameWithoutCompat] =\n      // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\n      // option added to the no-explicit-any rule when ESlint releases it.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      function () {\n        const serviceFxn = this._getService.bind(this, componentName);\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return serviceFxn.apply(this, component.multipleInstances ? args : []);\n      };\n    }\n    return component.type === \"PUBLIC\" /* ComponentType.PUBLIC */ ?\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    namespace[componentNameWithoutCompat] : null;\n  }\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app, name) {\n    if (name === 'serverAuth') {\n      return null;\n    }\n    const useService = name;\n    return useService;\n  }\n  return namespace;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Return a firebase namespace object.\r\n *\r\n * In production, this will be called exactly once and the result\r\n * assigned to the 'firebase' global.  It may be called multiple times\r\n * in unit tests.\r\n */\nfunction createFirebaseNamespace() {\n  const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\n  namespace.INTERNAL = Object.assign(Object.assign({}, namespace.INTERNAL), {\n    createFirebaseNamespace,\n    extendNamespace,\n    createSubscribe,\n    ErrorFactory,\n    deepExtend\n  });\n  /**\r\n   * Patch the top-level firebase namespace with additional properties.\r\n   *\r\n   * firebase.INTERNAL.extendNamespace()\r\n   */\n  function extendNamespace(props) {\n    deepExtend(namespace, props);\n  }\n  return namespace;\n}\nconst firebase$1 = createFirebaseNamespace();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logger = new Logger('@firebase/app-compat');\nconst name = \"@firebase/app-compat\";\nconst version = \"0.2.3\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerCoreComponents(variant) {\n  // Register `app` package.\n  registerVersion(name, version, variant);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Firebase Lite detection\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nif (isBrowser() && self.firebase !== undefined) {\n  logger.warn(`\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  `);\n  // eslint-disable-next-line\n  const sdkVersion = self.firebase.SDK_VERSION;\n  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\n    logger.warn(`\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    `);\n  }\n}\nconst firebase = firebase$1;\nregisterCoreComponents();\nexport { firebase as default };","map":{"version":3,"mappings":"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","names":["FirebaseAppImpl","constructor","firebase","_delegate","_addComponent","Component","container","automaticDataCollectionEnabled","val","name","options","delete","Promise","resolve","checkDestroyed","then","INTERNAL","removeApp","deleteApp","_getService","instanceIdentifier","_DEFAULT_ENTRY_NAME","provider","getProvider","isInitialized","getComponent","initialize","getImmediate","identifier","_removeServiceInstance","clearInstance","component","_addOrOverwriteComponent","toJSON","ERRORS","ERROR_FACTORY","ErrorFactory","createFirebaseNamespaceCore","firebaseAppImpl","apps","namespace","__esModule","initializeApp","initializeAppCompat","app","registerVersion","modularAPIs","setLogLevel","onLog","SDK_VERSION","registerComponent","registerComponentCompat","useAsService","Object","defineProperty","get","getApps","contains","create","appName","rawConfig","appCompat","keys","map","componentName","componentNameWithoutCompat","replace","_registerComponent","type","serviceNamespace","appArg","serviceProps","undefined","deepExtend","prototype","serviceFxn","bind","args","apply","multipleInstances","useService","createFirebaseNamespace","extendNamespace","createSubscribe","props","logger","Logger","registerCoreComponents","variant","version","isBrowser","self","warn","sdkVersion","indexOf","firebaseNamespace"],"sources":["C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\firebaseApp.ts","C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\errors.ts","C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\firebaseNamespaceCore.ts","C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\firebaseNamespace.ts","C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\logger.ts","C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\registerCoreComponents.ts","C:\\Users\\Vivek\\node_modules\\@firebase\\app-compat\\src\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseOptions } from './public-types';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstantiationMode,\n  Name\n} from '@firebase/component';\nimport {\n  deleteApp,\n  _addComponent,\n  _addOrOverwriteComponent,\n  _DEFAULT_ENTRY_NAME,\n  _FirebaseAppInternal as _FirebaseAppExp\n} from '@firebase/app';\nimport { _FirebaseService, _FirebaseNamespace } from './types';\nimport { Compat } from '@firebase/util';\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface _FirebaseApp {\n  /**\n   * The (read-only) name (identifier) for this App. '[DEFAULT]' is the default\n   * App.\n   */\n  name: string;\n\n  /**\n   * The (read-only) configuration options from the app initialization.\n   */\n  options: FirebaseOptions;\n\n  /**\n   * The settable config flag for GDPR opt-in/opt-out\n   */\n  automaticDataCollectionEnabled: boolean;\n\n  /**\n   * Make the given App unusable and free resources.\n   */\n  delete(): Promise<void>;\n}\n/**\n * Global context object for a collection of services using\n * a shared authentication state.\n *\n * marked as internal because it references internal types exported from @firebase/app\n * @internal\n */\nexport class FirebaseAppImpl implements Compat<_FirebaseAppExp>, _FirebaseApp {\n  private container: ComponentContainer;\n\n  constructor(\n    readonly _delegate: _FirebaseAppExp,\n    private readonly firebase: _FirebaseNamespace\n  ) {\n    // add itself to container\n    _addComponent(\n      _delegate,\n      new Component('app-compat', () => this, ComponentType.PUBLIC)\n    );\n\n    this.container = _delegate.container;\n  }\n\n  get automaticDataCollectionEnabled(): boolean {\n    return this._delegate.automaticDataCollectionEnabled;\n  }\n\n  set automaticDataCollectionEnabled(val) {\n    this._delegate.automaticDataCollectionEnabled = val;\n  }\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get options(): FirebaseOptions {\n    return this._delegate.options;\n  }\n\n  delete(): Promise<void> {\n    return new Promise<void>(resolve => {\n      this._delegate.checkDestroyed();\n      resolve();\n    }).then(() => {\n      this.firebase.INTERNAL.removeApp(this.name);\n      return deleteApp(this._delegate);\n    });\n  }\n\n  /**\n   * Return a service instance associated with this app (creating it\n   * on demand), identified by the passed instanceIdentifier.\n   *\n   * NOTE: Currently storage and functions are the only ones that are leveraging this\n   * functionality. They invoke it by calling:\n   *\n   * ```javascript\n   * firebase.app().storage('STORAGE BUCKET ID')\n   * ```\n   *\n   * The service name is passed to this already\n   * @internal\n   */\n  _getService(\n    name: string,\n    instanceIdentifier: string = _DEFAULT_ENTRY_NAME\n  ): _FirebaseService {\n    this._delegate.checkDestroyed();\n\n    // Initialize instance if InstatiationMode is `EXPLICIT`.\n    const provider = this._delegate.container.getProvider(name as Name);\n    if (\n      !provider.isInitialized() &&\n      provider.getComponent()?.instantiationMode === InstantiationMode.EXPLICIT\n    ) {\n      provider.initialize();\n    }\n\n    // getImmediate will always succeed because _getService is only called for registered components.\n    return provider.getImmediate({\n      identifier: instanceIdentifier\n    }) as unknown as _FirebaseService;\n  }\n\n  /**\n   * Remove a service instance from the cache, so we will create a new instance for this service\n   * when people try to get it again.\n   *\n   * NOTE: currently only firestore uses this functionality to support firestore shutdown.\n   *\n   * @param name The service name\n   * @param instanceIdentifier instance identifier in case multiple instances are allowed\n   * @internal\n   */\n  _removeServiceInstance(\n    name: string,\n    instanceIdentifier: string = _DEFAULT_ENTRY_NAME\n  ): void {\n    this._delegate.container\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      .getProvider(name as any)\n      .clearInstance(instanceIdentifier);\n  }\n\n  /**\n   * @param component the component being added to this app's container\n   * @internal\n   */\n  _addComponent(component: Component): void {\n    _addComponent(this._delegate, component);\n  }\n\n  _addOrOverwriteComponent(component: Component): void {\n    _addOrOverwriteComponent(this._delegate, component);\n  }\n\n  toJSON(): object {\n    return {\n      name: this.name,\n      automaticDataCollectionEnabled: this.automaticDataCollectionEnabled,\n      options: this.options\n    };\n  }\n}\n\n// TODO: investigate why the following needs to be commented out\n// Prevent dead-code elimination of these methods w/o invalid property\n// copying.\n// (FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||\n//   FirebaseAppImpl.prototype.delete ||\n//   console.log('dc');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppError {\n  NO_APP = 'no-app',\n  INVALID_APP_ARGUMENT = 'invalid-app-argument'\n}\n\nconst ERRORS: ErrorMap<AppError> = {\n  [AppError.NO_APP]:\n    \"No Firebase App '{$appName}' has been created - \" +\n    'call Firebase App.initializeApp()',\n  [AppError.INVALID_APP_ARGUMENT]:\n    'firebase.{$appName}() takes either no argument or a ' +\n    'Firebase App instance.'\n};\n\ntype ErrorParams = { [key in AppError]: { appName: string } };\n\nexport const ERROR_FACTORY = new ErrorFactory<AppError, ErrorParams>(\n  'app-compat',\n  'Firebase',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, FirebaseOptions } from './public-types';\nimport {\n  _FirebaseNamespace,\n  _FirebaseService,\n  FirebaseServiceNamespace\n} from './types';\nimport * as modularAPIs from '@firebase/app';\nimport { _FirebaseAppInternal as _FirebaseAppExp } from '@firebase/app';\nimport { Component, ComponentType, Name } from '@firebase/component';\n\nimport { deepExtend, contains } from '@firebase/util';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { ERROR_FACTORY, AppError } from './errors';\nimport { FirebaseAppLiteImpl } from './lite/firebaseAppLite';\n\n/**\n * Because auth can't share code with other components, we attach the utility functions\n * in an internal namespace to share code.\n * This function return a firebase namespace object without\n * any utility functions, so it can be shared between the regular firebaseNamespace and\n * the lite version.\n */\nexport function createFirebaseNamespaceCore(\n  firebaseAppImpl: typeof FirebaseAppImpl | typeof FirebaseAppLiteImpl\n): _FirebaseNamespace {\n  const apps: { [name: string]: FirebaseApp } = {};\n  // // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  // const components = new Map<string, Component<any>>();\n\n  // A namespace is a plain JavaScript Object.\n  const namespace: _FirebaseNamespace = {\n    // Hack to prevent Babel from modifying the object returned\n    // as the firebase namespace.\n    // @ts-ignore\n    __esModule: true,\n    initializeApp: initializeAppCompat,\n    // @ts-ignore\n    app,\n    registerVersion: modularAPIs.registerVersion,\n    setLogLevel: modularAPIs.setLogLevel,\n    onLog: modularAPIs.onLog,\n    // @ts-ignore\n    apps: null,\n    SDK_VERSION: modularAPIs.SDK_VERSION,\n    INTERNAL: {\n      registerComponent: registerComponentCompat,\n      removeApp,\n      useAsService,\n      modularAPIs\n    }\n  };\n\n  // Inject a circular default export to allow Babel users who were previously\n  // using:\n  //\n  //   import firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase').default;\n  //\n  // instead of\n  //\n  //   import * as firebase from 'firebase';\n  //   which becomes: var firebase = require('firebase');\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (namespace as any)['default'] = namespace;\n\n  // firebase.apps is a read-only getter.\n  Object.defineProperty(namespace, 'apps', {\n    get: getApps\n  });\n\n  /**\n   * Called by App.delete() - but before any services associated with the App\n   * are deleted.\n   */\n  function removeApp(name: string): void {\n    delete apps[name];\n  }\n\n  /**\n   * Get the App object for a given name (or DEFAULT).\n   */\n  function app(name?: string): FirebaseApp {\n    name = name || modularAPIs._DEFAULT_ENTRY_NAME;\n    if (!contains(apps, name)) {\n      throw ERROR_FACTORY.create(AppError.NO_APP, { appName: name });\n    }\n    return apps[name];\n  }\n\n  // @ts-ignore\n  app['App'] = firebaseAppImpl;\n\n  /**\n   * Create a new App instance (name must be unique).\n   *\n   * This function is idempotent. It can be called more than once and return the same instance using the same options and config.\n   */\n  function initializeAppCompat(\n    options: FirebaseOptions,\n    rawConfig = {}\n  ): FirebaseApp {\n    const app = modularAPIs.initializeApp(\n      options,\n      rawConfig\n    ) as _FirebaseAppExp;\n\n    if (contains(apps, app.name)) {\n      return apps[app.name];\n    }\n\n    const appCompat = new firebaseAppImpl(app, namespace);\n    apps[app.name] = appCompat;\n    return appCompat;\n  }\n\n  /*\n   * Return an array of all the non-deleted FirebaseApps.\n   */\n  function getApps(): FirebaseApp[] {\n    // Make a copy so caller cannot mutate the apps list.\n    return Object.keys(apps).map(name => apps[name]);\n  }\n\n  function registerComponentCompat<T extends Name>(\n    component: Component<T>\n  ): FirebaseServiceNamespace<_FirebaseService> | null {\n    const componentName = component.name;\n    const componentNameWithoutCompat = componentName.replace('-compat', '');\n    if (\n      modularAPIs._registerComponent(component) &&\n      component.type === ComponentType.PUBLIC\n    ) {\n      // create service namespace for public components\n      // The Service namespace is an accessor function ...\n      const serviceNamespace = (\n        appArg: FirebaseApp = app()\n      ): _FirebaseService => {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if (typeof (appArg as any)[componentNameWithoutCompat] !== 'function') {\n          // Invalid argument.\n          // This happens in the following case: firebase.storage('gs:/')\n          throw ERROR_FACTORY.create(AppError.INVALID_APP_ARGUMENT, {\n            appName: componentName\n          });\n        }\n\n        // Forward service instance lookup to the FirebaseApp.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (appArg as any)[componentNameWithoutCompat]();\n      };\n\n      // ... and a container for service-level properties.\n      if (component.serviceProps !== undefined) {\n        deepExtend(serviceNamespace, component.serviceProps);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (namespace as any)[componentNameWithoutCompat] = serviceNamespace;\n\n      // Patch the FirebaseAppImpl prototype\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (firebaseAppImpl.prototype as any)[componentNameWithoutCompat] =\n        // TODO: The eslint disable can be removed and the 'ignoreRestArgs'\n        // option added to the no-explicit-any rule when ESlint releases it.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        function (...args: any) {\n          const serviceFxn = this._getService.bind(this, componentName);\n          return serviceFxn.apply(\n            this,\n            component.multipleInstances ? args : []\n          );\n        };\n    }\n\n    return component.type === ComponentType.PUBLIC\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (namespace as any)[componentNameWithoutCompat]\n      : null;\n  }\n\n  // Map the requested service to a registered service name\n  // (used to map auth to serverAuth service when needed).\n  function useAsService(app: FirebaseApp, name: string): string | null {\n    if (name === 'serverAuth') {\n      return null;\n    }\n\n    const useService = name;\n\n    return useService;\n  }\n\n  return namespace;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseNamespace } from './public-types';\nimport { createSubscribe, deepExtend, ErrorFactory } from '@firebase/util';\nimport { FirebaseAppImpl } from './firebaseApp';\nimport { createFirebaseNamespaceCore } from './firebaseNamespaceCore';\n\n/**\n * Return a firebase namespace object.\n *\n * In production, this will be called exactly once and the result\n * assigned to the 'firebase' global.  It may be called multiple times\n * in unit tests.\n */\nexport function createFirebaseNamespace(): FirebaseNamespace {\n  const namespace = createFirebaseNamespaceCore(FirebaseAppImpl);\n  namespace.INTERNAL = {\n    ...namespace.INTERNAL,\n    createFirebaseNamespace,\n    extendNamespace,\n    createSubscribe,\n    ErrorFactory,\n    deepExtend\n  };\n\n  /**\n   * Patch the top-level firebase namespace with additional properties.\n   *\n   * firebase.INTERNAL.extendNamespace()\n   */\n  function extendNamespace(props: { [prop: string]: unknown }): void {\n    deepExtend(namespace, props);\n  }\n\n  return namespace;\n}\n\nexport const firebase = createFirebaseNamespace();\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-compat');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { registerVersion } from '@firebase/app';\n\nimport { name, version } from '../package.json';\n\nexport function registerCoreComponents(variant?: string): void {\n  // Register `app` package.\n  registerVersion(name, version, variant);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseNamespace } from './public-types';\nimport { isBrowser } from '@firebase/util';\nimport { firebase as firebaseNamespace } from './firebaseNamespace';\nimport { logger } from './logger';\nimport { registerCoreComponents } from './registerCoreComponents';\n\n// Firebase Lite detection\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nif (isBrowser() && (self as any).firebase !== undefined) {\n  logger.warn(`\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  `);\n\n  // eslint-disable-next-line\n  const sdkVersion = ((self as any).firebase as FirebaseNamespace).SDK_VERSION;\n  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {\n    logger.warn(`\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    `);\n  }\n}\n\nconst firebase = firebaseNamespace;\n\nregisterCoreComponents();\n\n// eslint-disable-next-line import/no-default-export\nexport default firebase;\n\nexport { _FirebaseNamespace, _FirebaseService } from './types';\nexport { FirebaseApp, FirebaseNamespace } from './public-types';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}