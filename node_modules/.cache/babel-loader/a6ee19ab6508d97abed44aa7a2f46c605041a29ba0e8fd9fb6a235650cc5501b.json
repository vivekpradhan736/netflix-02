{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/Vivek/OneDrive/Documents/React JS Tutorial/Project_01-Netflix/netflix-clone02/netflix-clone02/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/Vivek/OneDrive/Documents/React JS Tutorial/Project_01-Netflix/netflix-clone02/netflix-clone02/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/Vivek/OneDrive/Documents/React JS Tutorial/Project_01-Netflix/netflix-clone02/netflix-clone02/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/Vivek/OneDrive/Documents/React JS Tutorial/Project_01-Netflix/netflix-clone02/netflix-clone02/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ConsoleMethod;\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A container for all of the Logger instances\r\n */\nvar instances = [];\n/**\r\n * The JS SDK supports 5 log levels and also allows a user the ability to\r\n * silence the logs altogether.\r\n *\r\n * The order is a follows:\r\n * DEBUG < VERBOSE < INFO < WARN < ERROR\r\n *\r\n * All of the log types above the current log level will be captured (i.e. if\r\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\r\n * `VERBOSE` logs will not)\r\n */\nvar LogLevel;\n(function (LogLevel) {\n  LogLevel[LogLevel[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogLevel[LogLevel[\"VERBOSE\"] = 1] = \"VERBOSE\";\n  LogLevel[LogLevel[\"INFO\"] = 2] = \"INFO\";\n  LogLevel[LogLevel[\"WARN\"] = 3] = \"WARN\";\n  LogLevel[LogLevel[\"ERROR\"] = 4] = \"ERROR\";\n  LogLevel[LogLevel[\"SILENT\"] = 5] = \"SILENT\";\n})(LogLevel || (LogLevel = {}));\nvar levelStringToEnum = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n/**\r\n * The default log level\r\n */\nvar defaultLogLevel = LogLevel.INFO;\n/**\r\n * By default, `console.debug` is not displayed in the developer console (in\r\n * chrome). To avoid forcing users to have to opt-in to these logs twice\r\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\r\n * logs to the `console.log` function.\r\n */\nvar ConsoleMethod = (_ConsoleMethod = {}, _defineProperty(_ConsoleMethod, LogLevel.DEBUG, 'log'), _defineProperty(_ConsoleMethod, LogLevel.VERBOSE, 'log'), _defineProperty(_ConsoleMethod, LogLevel.INFO, 'info'), _defineProperty(_ConsoleMethod, LogLevel.WARN, 'warn'), _defineProperty(_ConsoleMethod, LogLevel.ERROR, 'error'), _ConsoleMethod);\n/**\r\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\r\n * messages on to their corresponding console counterparts (if the log method\r\n * is supported by the current log level)\r\n */\nvar defaultLogHandler = function defaultLogHandler(instance, logType) {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  var now = new Date().toISOString();\n  var method = ConsoleMethod[logType];\n  if (method) {\n    var _console;\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    (_console = console)[method].apply(_console, [\"[\".concat(now, \"]  \").concat(instance.name, \":\")].concat(args));\n  } else {\n    throw new Error(\"Attempted to log a message with an invalid logType (value: \".concat(logType, \")\"));\n  }\n};\nvar Logger = /*#__PURE__*/function () {\n  /**\r\n   * Gives you an instance of a Logger to capture messages according to\r\n   * Firebase's logging scheme.\r\n   *\r\n   * @param name The name that the logs will be associated with\r\n   */\n  function Logger(name) {\n    _classCallCheck(this, Logger);\n    this.name = name;\n    /**\r\n     * The log level of the given Logger instance.\r\n     */\n    this._logLevel = defaultLogLevel;\n    /**\r\n     * The main (internal) log handler for the Logger instance.\r\n     * Can be set to a new function in internal package code but not by user.\r\n     */\n    this._logHandler = defaultLogHandler;\n    /**\r\n     * The optional, additional, user-defined log handler for the Logger instance.\r\n     */\n    this._userLogHandler = null;\n    /**\r\n     * Capture the current instance for later use\r\n     */\n    instances.push(this);\n  }\n  _createClass(Logger, [{\n    key: \"logLevel\",\n    get: function get() {\n      return this._logLevel;\n    },\n    set: function set(val) {\n      if (!(val in LogLevel)) {\n        throw new TypeError(\"Invalid value \\\"\".concat(val, \"\\\" assigned to `logLevel`\"));\n      }\n      this._logLevel = val;\n    }\n    // Workaround for setter/getter having to be the same type.\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(val) {\n      this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n    }\n  }, {\n    key: \"logHandler\",\n    get: function get() {\n      return this._logHandler;\n    },\n    set: function set(val) {\n      if (typeof val !== 'function') {\n        throw new TypeError('Value assigned to `logHandler` must be a function');\n      }\n      this._logHandler = val;\n    }\n  }, {\n    key: \"userLogHandler\",\n    get: function get() {\n      return this._userLogHandler;\n    },\n    set: function set(val) {\n      this._userLogHandler = val;\n    }\n    /**\r\n     * The functions below are all based on the `console` interface\r\n     */\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));\n    }\n  }, {\n    key: \"log\",\n    value: function log() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.INFO].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.WARN].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));\n    }\n  }, {\n    key: \"error\",\n    value: function error() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      this._userLogHandler && this._userLogHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n      this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));\n    }\n  }]);\n  return Logger;\n}();\nfunction setLogLevel(level) {\n  instances.forEach(function (inst) {\n    inst.setLogLevel(level);\n  });\n}\nfunction setUserLogHandler(logCallback, options) {\n  var _iterator = _createForOfIteratorHelper(instances),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var instance = _step.value;\n      var customLogLevel = null;\n      if (options && options.level) {\n        customLogLevel = levelStringToEnum[options.level];\n      }\n      if (logCallback === null) {\n        instance.userLogHandler = null;\n      } else {\n        instance.userLogHandler = function (instance, level) {\n          for (var _len7 = arguments.length, args = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n            args[_key7 - 2] = arguments[_key7];\n          }\n          var message = args.map(function (arg) {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          }).filter(function (arg) {\n            return arg;\n          }).join(' ');\n          if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance.logLevel)) {\n            logCallback({\n              level: LogLevel[level].toLowerCase(),\n              message: message,\n              args: args,\n              type: instance.name\n            });\n          }\n        };\n      }\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nexport { LogLevel, Logger, setLogLevel, setUserLogHandler };","map":{"version":3,"mappings":"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","names":["instances","LogLevel","levelStringToEnum","DEBUG","VERBOSE","INFO","WARN","ERROR","SILENT","defaultLogLevel","ConsoleMethod","defaultLogHandler","instance","logType","logLevel","now","Date","toISOString","method","args","name","Error","Logger","push","_logLevel","val","TypeError","_logHandler","_userLogHandler","setLogLevel","level","forEach","inst","logCallback","options","customLogLevel","userLogHandler","message","map","arg","toString","JSON","stringify","ignored","filter","join","toLowerCase","type"],"sources":["C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\logger\\src\\logger.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport type LogLevelString =\n  | 'debug'\n  | 'verbose'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'silent';\n\nexport interface LogOptions {\n  level: LogLevelString;\n}\n\nexport type LogCallback = (callbackParams: LogCallbackParams) => void;\n\nexport interface LogCallbackParams {\n  level: LogLevelString;\n  message: string;\n  args: unknown[];\n  type: string;\n}\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\nconst levelStringToEnum: { [key in LogLevelString]: LogLevel } = {\n  'debug': LogLevel.DEBUG,\n  'verbose': LogLevel.VERBOSE,\n  'info': LogLevel.INFO,\n  'warn': LogLevel.WARN,\n  'error': LogLevel.ERROR,\n  'silent': LogLevel.SILENT\n};\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: unknown[]\n) => void;\n\n/**\n * By default, `console.debug` is not displayed in the developer console (in\n * chrome). To avoid forcing users to have to opt-in to these logs twice\n * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n * logs to the `console.log` function.\n */\nconst ConsoleMethod = {\n  [LogLevel.DEBUG]: 'log',\n  [LogLevel.VERBOSE]: 'log',\n  [LogLevel.INFO]: 'info',\n  [LogLevel.WARN]: 'warn',\n  [LogLevel.ERROR]: 'error'\n};\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args): void => {\n  if (logType < instance.logLevel) {\n    return;\n  }\n  const now = new Date().toISOString();\n  const method = ConsoleMethod[logType as keyof typeof ConsoleMethod];\n  if (method) {\n    console[method as 'log' | 'info' | 'warn' | 'error'](\n      `[${now}]  ${instance.name}:`,\n      ...args\n    );\n  } else {\n    throw new Error(\n      `Attempted to log a message with an invalid logType (value: ${logType})`\n    );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError(`Invalid value \"${val}\" assigned to \\`logLevel\\``);\n    }\n    this._logLevel = val;\n  }\n\n  // Workaround for setter/getter having to be the same type.\n  setLogLevel(val: LogLevel | LogLevelString): void {\n    this._logLevel = typeof val === 'string' ? levelStringToEnum[val] : val;\n  }\n\n  /**\n   * The main (internal) log handler for the Logger instance.\n   * Can be set to a new function in internal package code but not by user.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The optional, additional, user-defined log handler for the Logger instance.\n   */\n  private _userLogHandler: LogHandler | null = null;\n  get userLogHandler(): LogHandler | null {\n    return this._userLogHandler;\n  }\n  set userLogHandler(val: LogHandler | null) {\n    this._userLogHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args: unknown[]): void {\n    this._userLogHandler &&\n      this._userLogHandler(this, LogLevel.VERBOSE, ...args);\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args: unknown[]): void {\n    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n\nexport function setLogLevel(level: LogLevelString | LogLevel): void {\n  instances.forEach(inst => {\n    inst.setLogLevel(level);\n  });\n}\n\nexport function setUserLogHandler(\n  logCallback: LogCallback | null,\n  options?: LogOptions\n): void {\n  for (const instance of instances) {\n    let customLogLevel: LogLevel | null = null;\n    if (options && options.level) {\n      customLogLevel = levelStringToEnum[options.level];\n    }\n    if (logCallback === null) {\n      instance.userLogHandler = null;\n    } else {\n      instance.userLogHandler = (\n        instance: Logger,\n        level: LogLevel,\n        ...args: unknown[]\n      ) => {\n        const message = args\n          .map(arg => {\n            if (arg == null) {\n              return null;\n            } else if (typeof arg === 'string') {\n              return arg;\n            } else if (typeof arg === 'number' || typeof arg === 'boolean') {\n              return arg.toString();\n            } else if (arg instanceof Error) {\n              return arg.message;\n            } else {\n              try {\n                return JSON.stringify(arg);\n              } catch (ignored) {\n                return null;\n              }\n            }\n          })\n          .filter(arg => arg)\n          .join(' ');\n        if (level >= (customLogLevel ?? instance.logLevel)) {\n          logCallback({\n            level: LogLevel[level].toLowerCase() as LogLevelString,\n            message,\n            args,\n            type: instance.name\n          });\n        }\n      };\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}