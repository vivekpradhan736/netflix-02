{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vivek\\\\OneDrive\\\\Documents\\\\React JS Tutorial\\\\Project_01-Netflix\\\\netflix-clone02\\\\netflix-clone02\\\\src\\\\Row.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport './Row.css';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nfunction Row(_ref) {\n  _s();\n  let {\n    title,\n    fetchUrl,\n    isLargeRow = false\n  } = _ref;\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row_posters\",\n      children: movies === null || movies === void 0 ? void 0 : movies.map(movie => (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        // onClick={() => handleClick(movie)}\n        className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Youtube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n_c = Row;\nexport default Row;\nvar _c;\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","map","movie","poster_path","backdrop_path","name","id","trailerUrl"],"sources":["C:/Users/Vivek/OneDrive/Documents/React JS Tutorial/Project_01-Netflix/netflix-clone02/netflix-clone02/src/Row.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow = false }) {\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n    const opts = {\r\n      height: \"390\",\r\n      width: \"100%\",\r\n      playerVars: {\r\n        autoplay: 1,\r\n      },\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row_posters\">\r\n        {movies?.map((movie) => (\r\n            (isLargeRow && movie.poster_path) ||\r\n            (!isLargeRow && movie.backdrop_path)) && (\r\n          <img\r\n            // onClick={() => handleClick(movie)}\r\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\r\n            key={movie.id}\r\n            src={`${base_url}${\r\n              isLargeRow ? movie.poster_path : movie.backdrop_path\r\n            }`}\r\n            alt={movie.name}\r\n          />\r\n         ) )}\r\n      </div>\r\n      <Youtube videoId={trailerUrl} opts={opts} />\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Row;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,eAAe;AAAC;AAEpC,MAAMC,QAAQ,GAAG,sCAAsC;AAEvD,SAASC,GAAG,OAA0C;EAAA;EAAA,IAAzC;IAAEC,KAAK;IAAEC,QAAQ;IAAEC,UAAU,GAAG;EAAM,CAAC;EAChD,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACZ,eAAeU,SAAS,GAAG;MACvB,MAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAG,CAACN,QAAQ,CAAC;MACzCG,SAAS,CAACE,OAAO,CAACE,IAAI,CAACC,OAAO,CAAC;MAC/B,OAAOH,OAAO;IAClB;IACAD,SAAS,EAAE;EACf,CAAC,EAAE,CAACJ,QAAQ,CAAC,CAAC;EAEd,MAAMS,IAAI,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,MAAM;IACbC,UAAU,EAAE;MACVC,QAAQ,EAAE;IACZ;EACF,CAAC;EAED,oBACI;IAAK,SAAS,EAAC,KAAK;IAAA,wBACtB;MAAA,UAAKd;IAAK;MAAA;MAAA;MAAA;IAAA,QAAM,eAEhB;MAAK,SAAS,EAAC,aAAa;MAAA,UACzBG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEY,GAAG,CAAEC,KAAK,IAAK,CACnBd,UAAU,IAAIc,KAAK,CAACC,WAAW,IAC/B,CAACf,UAAU,IAAIc,KAAK,CAACE,aAAc,kBACtC;QACE;QACA,SAAS,EAAG,cAAahB,UAAU,IAAI,iBAAkB,EAAE;QAE3D,GAAG,EAAG,GAAEJ,QAAS,GACfI,UAAU,GAAGc,KAAK,CAACC,WAAW,GAAGD,KAAK,CAACE,aACxC,EAAE;QACH,GAAG,EAAEF,KAAK,CAACG;MAAK,GAJXH,KAAK,CAACI,EAAE;QAAA;QAAA;QAAA;MAAA,QAMf;IAAE;MAAA;MAAA;MAAA;IAAA,QACA,eACN,QAAC,OAAO;MAAC,OAAO,EAAEC,UAAW;MAAC,IAAI,EAAEX;IAAK;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACxC;AAEV;AAAC,GA1CQX,GAAG;AAAA,KAAHA,GAAG;AA4CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}