{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = value => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = value => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = x => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/YouTube.tsx\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport isEqual from \"fast-deep-equal\";\nimport youTubePlayer from \"youtube-player\";\nfunction shouldUpdateVideo(prevProps, props) {\n  var _a, _b;\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n  const prevVars = ((_a = prevProps.opts) == null ? void 0 : _a.playerVars) || {};\n  const vars = ((_b = props.opts) == null ? void 0 : _b.playerVars) || {};\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\nfunction filterResetOptions() {\n  let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return __spreadProps(__spreadValues({}, opts), {\n    height: 0,\n    width: 0,\n    playerVars: __spreadProps(__spreadValues({}, opts.playerVars), {\n      autoplay: 0,\n      start: 0,\n      end: 0\n    })\n  });\n}\nfunction shouldResetPlayer(prevProps, props) {\n  return prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts));\n}\nfunction shouldUpdatePlayer(prevProps, props) {\n  var _a, _b, _c, _d;\n  return prevProps.id !== props.id || prevProps.className !== props.className || ((_a = prevProps.opts) == null ? void 0 : _a.width) !== ((_b = props.opts) == null ? void 0 : _b.width) || ((_c = prevProps.opts) == null ? void 0 : _c.height) !== ((_d = props.opts) == null ? void 0 : _d.height) || prevProps.iframeClassName !== props.iframeClassName || prevProps.title !== props.title;\n}\nvar defaultProps = {\n  videoId: \"\",\n  id: \"\",\n  className: \"\",\n  iframeClassName: \"\",\n  style: {},\n  title: \"\",\n  loading: void 0,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {}\n};\nvar propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf([\"lazy\", \"eager\"]),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func\n};\nvar _YouTube = class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.destroyPlayerPromise = void 0;\n    this.onPlayerReady = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onReady) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerError = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onError) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerStateChange = event => {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      (_b = (_a = this.props).onStateChange) == null ? void 0 : _b.call(_a, event);\n      switch (event.data) {\n        case _YouTube.PlayerState.ENDED:\n          (_d = (_c = this.props).onEnd) == null ? void 0 : _d.call(_c, event);\n          break;\n        case _YouTube.PlayerState.PLAYING:\n          (_f = (_e = this.props).onPlay) == null ? void 0 : _f.call(_e, event);\n          break;\n        case _YouTube.PlayerState.PAUSED:\n          (_h = (_g = this.props).onPause) == null ? void 0 : _h.call(_g, event);\n          break;\n        default:\n      }\n    };\n    this.onPlayerPlaybackRateChange = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onPlaybackRateChange) == null ? void 0 : _b.call(_a, event);\n    };\n    this.onPlayerPlaybackQualityChange = event => {\n      var _a, _b;\n      return (_b = (_a = this.props).onPlaybackQualityChange) == null ? void 0 : _b.call(_a, event);\n    };\n    this.destroyPlayer = () => {\n      if (this.internalPlayer) {\n        this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => this.destroyPlayerPromise = void 0);\n        return this.destroyPlayerPromise;\n      }\n      return Promise.resolve();\n    };\n    this.createPlayer = () => {\n      if (typeof document === \"undefined\") return;\n      if (this.destroyPlayerPromise) {\n        this.destroyPlayerPromise.then(this.createPlayer);\n        return;\n      }\n      const playerOpts = __spreadProps(__spreadValues({}, this.props.opts), {\n        videoId: this.props.videoId\n      });\n      this.internalPlayer = youTubePlayer(this.container, playerOpts);\n      this.internalPlayer.on(\"ready\", this.onPlayerReady);\n      this.internalPlayer.on(\"error\", this.onPlayerError);\n      this.internalPlayer.on(\"stateChange\", this.onPlayerStateChange);\n      this.internalPlayer.on(\"playbackRateChange\", this.onPlayerPlaybackRateChange);\n      this.internalPlayer.on(\"playbackQualityChange\", this.onPlayerPlaybackQualityChange);\n      if (this.props.title || this.props.loading) {\n        this.internalPlayer.getIframe().then(iframe => {\n          if (this.props.title) iframe.setAttribute(\"title\", this.props.title);\n          if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);\n        });\n      }\n    };\n    this.resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n    this.updatePlayer = () => {\n      var _a;\n      (_a = this.internalPlayer) == null ? void 0 : _a.getIframe().then(iframe => {\n        if (this.props.id) iframe.setAttribute(\"id\", this.props.id);else iframe.removeAttribute(\"id\");\n        if (this.props.iframeClassName) iframe.setAttribute(\"class\", this.props.iframeClassName);else iframe.removeAttribute(\"class\");\n        if (this.props.opts && this.props.opts.width) iframe.setAttribute(\"width\", this.props.opts.width.toString());else iframe.removeAttribute(\"width\");\n        if (this.props.opts && this.props.opts.height) iframe.setAttribute(\"height\", this.props.opts.height.toString());else iframe.removeAttribute(\"height\");\n        if (this.props.title) iframe.setAttribute(\"title\", this.props.title);else iframe.setAttribute(\"title\", \"YouTube video player\");\n        if (this.props.loading) iframe.setAttribute(\"loading\", this.props.loading);else iframe.removeAttribute(\"loading\");\n      });\n    };\n    this.getInternalPlayer = () => {\n      return this.internalPlayer;\n    };\n    this.updateVideo = () => {\n      var _a, _b, _c, _d;\n      if (typeof this.props.videoId === \"undefined\" || this.props.videoId === null) {\n        (_a = this.internalPlayer) == null ? void 0 : _a.stopVideo();\n        return;\n      }\n      let autoplay = false;\n      const opts = {\n        videoId: this.props.videoId\n      };\n      if ((_b = this.props.opts) == null ? void 0 : _b.playerVars) {\n        autoplay = this.props.opts.playerVars.autoplay === 1;\n        if (\"start\" in this.props.opts.playerVars) {\n          opts.startSeconds = this.props.opts.playerVars.start;\n        }\n        if (\"end\" in this.props.opts.playerVars) {\n          opts.endSeconds = this.props.opts.playerVars.end;\n        }\n      }\n      if (autoplay) {\n        (_c = this.internalPlayer) == null ? void 0 : _c.loadVideoById(opts);\n        return;\n      }\n      (_d = this.internalPlayer) == null ? void 0 : _d.cueVideoById(opts);\n    };\n    this.refContainer = container => {\n      this.container = container;\n    };\n    this.container = null;\n    this.internalPlayer = null;\n  }\n  componentDidMount() {\n    this.createPlayer();\n  }\n  componentDidUpdate(prevProps) {\n    return __async(this, null, function* () {\n      if (shouldUpdatePlayer(prevProps, this.props)) {\n        this.updatePlayer();\n      }\n      if (shouldResetPlayer(prevProps, this.props)) {\n        yield this.resetPlayer();\n      }\n      if (shouldUpdateVideo(prevProps, this.props)) {\n        this.updateVideo();\n      }\n    });\n  }\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n  render() {\n    return /* @__PURE__ */React.createElement(\"div\", {\n      className: this.props.className,\n      style: this.props.style\n    }, /* @__PURE__ */React.createElement(\"div\", {\n      id: this.props.id,\n      className: this.props.iframeClassName,\n      ref: this.refContainer\n    }));\n  }\n};\nvar YouTube = _YouTube;\nYouTube.propTypes = propTypes;\nYouTube.defaultProps = defaultProps;\nYouTube.PlayerState = {\n  UNSTARTED: -1,\n  ENDED: 0,\n  PLAYING: 1,\n  PAUSED: 2,\n  BUFFERING: 3,\n  CUED: 5\n};\nvar YouTube_default = YouTube;\nexport { YouTube_default as default };","map":{"version":3,"mappings":"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","names":["PropTypes","React","isEqual","youTubePlayer","shouldUpdateVideo","prevProps","props","videoId","prevVars","_a","opts","playerVars","vars","_b","start","end","filterResetOptions","__spreadProps","height","width","autoplay","shouldResetPlayer","shouldUpdatePlayer","id","className","_c","_d","iframeClassName","title","defaultProps","style","loading","onReady","onError","onPlay","onPause","onEnd","onStateChange","onPlaybackRateChange","onPlaybackQualityChange","propTypes","string","object","oneOf","objectOf","any","func","_YouTube","Component","constructor","event","data","PlayerState","ENDED","PLAYING","PAUSED","internalPlayer","destroyPlayerPromise","destroy","then","Promise","resolve","document","createPlayer","playerOpts","container","on","onPlayerReady","onPlayerError","onPlayerStateChange","onPlayerPlaybackRateChange","onPlayerPlaybackQualityChange","getIframe","iframe","setAttribute","destroyPlayer","removeAttribute","toString","stopVideo","startSeconds","endSeconds","loadVideoById","cueVideoById","componentDidMount","componentDidUpdate","updatePlayer","resetPlayer","updateVideo","componentWillUnmount","render","ref","refContainer","YouTube","UNSTARTED","BUFFERING","CUED","YouTube_default"],"sources":["C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\react-youtube\\src\\YouTube.tsx"],"sourcesContent":["/** @jsxRuntime classic */\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport isEqual from 'fast-deep-equal';\nimport youTubePlayer from 'youtube-player';\nimport type { YouTubePlayer, Options } from 'youtube-player/dist/types';\n\n/**\n * Check whether a `props` change should result in the video being updated.\n */\nfunction shouldUpdateVideo(prevProps: YouTubeProps, props: YouTubeProps) {\n  // A changing video should always trigger an update\n  if (prevProps.videoId !== props.videoId) {\n    return true;\n  }\n\n  // Otherwise, a change in the start/end time playerVars also requires a player\n  // update.\n  const prevVars = prevProps.opts?.playerVars || {};\n  const vars = props.opts?.playerVars || {};\n\n  return prevVars.start !== vars.start || prevVars.end !== vars.end;\n}\n\n/**\n * Neutralize API options that only require a video update, leaving only options\n * that require a player reset. The results can then be compared to see if a\n * player reset is necessary.\n */\nfunction filterResetOptions(opts: Options = {}) {\n  return {\n    ...opts,\n    height: 0,\n    width: 0,\n    playerVars: {\n      ...opts.playerVars,\n      autoplay: 0,\n      start: 0,\n      end: 0,\n    },\n  };\n}\n\n/**\n * Check whether a `props` change should result in the player being reset.\n * The player is reset when the `props.opts` change, except if the only change\n * is in the `start` and `end` playerVars, because a video update can deal with\n * those.\n */\nfunction shouldResetPlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.videoId !== props.videoId || !isEqual(filterResetOptions(prevProps.opts), filterResetOptions(props.opts))\n  );\n}\n\n/**\n * Check whether a props change should result in an update of player.\n */\nfunction shouldUpdatePlayer(prevProps: YouTubeProps, props: YouTubeProps) {\n  return (\n    prevProps.id !== props.id ||\n    prevProps.className !== props.className ||\n    prevProps.opts?.width !== props.opts?.width ||\n    prevProps.opts?.height !== props.opts?.height ||\n    prevProps.iframeClassName !== props.iframeClassName ||\n    prevProps.title !== props.title\n  );\n}\n\ntype YoutubePlayerCueVideoOptions = {\n  videoId: string;\n  startSeconds?: number;\n  endSeconds?: number;\n  suggestedQuality?: string;\n};\n\nexport { YouTubePlayer };\n\nexport type YouTubeEvent<T = any> = {\n  data: T;\n  target: YouTubePlayer;\n};\n\nexport type YouTubeProps = {\n  /**\n   * The YouTube video ID.\n   *\n   * Examples\n   * - https://www.youtube.com/watch?v=XxVg_s8xAms (`XxVg_s8xAms` is the ID)\n   * - https://www.youtube.com/embed/-DX3vJiqxm4 (`-DX3vJiqxm4` is the ID)\n   */\n  videoId?: string;\n  /**\n   * Custom ID for the player element\n   */\n  id?: string;\n  /**\n   * Custom class name for the player element\n   */\n  className?: string;\n  /**\n   * Custom class name for the iframe element\n   */\n  iframeClassName?: string;\n  /**\n   * Custom style for the player container element\n   */\n  style?: React.CSSProperties;\n  /**\n   * Title of the video for the iframe's title tag.\n   */\n  title?: React.IframeHTMLAttributes<HTMLIFrameElement>['title'];\n  /**\n   * Indicates how the browser should load the iframe\n   * {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-loading}\n   */\n  loading?: React.IframeHTMLAttributes<HTMLIFrameElement>['loading'];\n  /**\n   * An object that specifies player options\n   * {@link https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player}\n   */\n  opts?: Options;\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onReady}\n   */\n  onReady?: (event: YouTubeEvent) => void;\n  /**\n   * This event fires if an error occurs in the player.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onError}\n   */\n  onError?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PLAYING.\n   */\n  onPlay?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.PAUSED.\n   */\n  onPause?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires when the layer's state changes to PlayerState.ENDED.\n   */\n  onEnd?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the player's state changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onStateChange}\n   */\n  onStateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback quality changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange}\n   */\n  onPlaybackRateChange?: (event: YouTubeEvent<number>) => void;\n  /**\n   * This event fires whenever the video playback rate changes.\n   * {@link https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange}\n   */\n  onPlaybackQualityChange?: (event: YouTubeEvent<string>) => void;\n};\n\nconst defaultProps: YouTubeProps = {\n  videoId: '',\n  id: '',\n  className: '',\n  iframeClassName: '',\n  style: {},\n  title: '',\n  loading: undefined,\n  opts: {},\n  onReady: () => {},\n  onError: () => {},\n  onPlay: () => {},\n  onPause: () => {},\n  onEnd: () => {},\n  onStateChange: () => {},\n  onPlaybackRateChange: () => {},\n  onPlaybackQualityChange: () => {},\n};\n\nconst propTypes = {\n  videoId: PropTypes.string,\n  id: PropTypes.string,\n  className: PropTypes.string,\n  iframeClassName: PropTypes.string,\n  style: PropTypes.object,\n  title: PropTypes.string,\n  loading: PropTypes.oneOf(['lazy', 'eager']),\n  opts: PropTypes.objectOf(PropTypes.any),\n  onReady: PropTypes.func,\n  onError: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPause: PropTypes.func,\n  onEnd: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onPlaybackRateChange: PropTypes.func,\n  onPlaybackQualityChange: PropTypes.func,\n};\n\nclass YouTube extends React.Component<YouTubeProps> {\n  static propTypes = propTypes;\n  static defaultProps = defaultProps;\n\n  /**\n   * Expose PlayerState constants for convenience. These constants can also be\n   * accessed through the global YT object after the YouTube IFrame API is instantiated.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  static PlayerState = {\n    UNSTARTED: -1,\n    ENDED: 0,\n    PLAYING: 1,\n    PAUSED: 2,\n    BUFFERING: 3,\n    CUED: 5,\n  };\n\n  container: HTMLDivElement | null;\n  internalPlayer: YouTubePlayer | null;\n\n  constructor(props: any) {\n    super(props);\n\n    this.container = null;\n    this.internalPlayer = null;\n  }\n\n  /**\n   * Note: The `youtube-player` package that is used promisifies all YouTube\n   * Player API calls, which introduces a delay of a tick before it actually\n   * gets destroyed.\n   *\n   * The promise to destroy the player is stored here so we can make sure to\n   * only re-create the Player after it's been destroyed.\n   *\n   * See: https://github.com/tjallingt/react-youtube/issues/355\n   */\n  destroyPlayerPromise: Promise<void> | undefined = undefined;\n\n  componentDidMount() {\n    this.createPlayer();\n  }\n\n  async componentDidUpdate(prevProps: YouTubeProps) {\n    if (shouldUpdatePlayer(prevProps, this.props)) {\n      this.updatePlayer();\n    }\n\n    if (shouldResetPlayer(prevProps, this.props)) {\n      await this.resetPlayer();\n    }\n\n    if (shouldUpdateVideo(prevProps, this.props)) {\n      this.updateVideo();\n    }\n  }\n\n  componentWillUnmount() {\n    this.destroyPlayer();\n  }\n\n  /**\n   * This event fires whenever a player has finished loading and is ready to begin receiving API calls.\n   * https://developers.google.com/youtube/iframe_api_reference#onReady\n   */\n  onPlayerReady = (event: YouTubeEvent) => this.props.onReady?.(event);\n\n  /**\n   * This event fires if an error occurs in the player.\n   * https://developers.google.com/youtube/iframe_api_reference#onError\n   */\n  onPlayerError = (event: YouTubeEvent<number>) => this.props.onError?.(event);\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onStateChange\n   */\n  onPlayerStateChange = (event: YouTubeEvent<number>) => {\n    this.props.onStateChange?.(event);\n    // @ts-ignore\n    switch (event.data) {\n      case YouTube.PlayerState.ENDED:\n        this.props.onEnd?.(event);\n        break;\n\n      case YouTube.PlayerState.PLAYING:\n        this.props.onPlay?.(event);\n        break;\n\n      case YouTube.PlayerState.PAUSED:\n        this.props.onPause?.(event);\n        break;\n\n      default:\n    }\n  };\n\n  /**\n   * This event fires whenever the video playback quality changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackRateChange\n   */\n  onPlayerPlaybackRateChange = (event: YouTubeEvent<number>) => this.props.onPlaybackRateChange?.(event);\n\n  /**\n   * This event fires whenever the video playback rate changes.\n   * https://developers.google.com/youtube/iframe_api_reference#onPlaybackQualityChange\n   */\n  onPlayerPlaybackQualityChange = (event: YouTubeEvent<string>) => this.props.onPlaybackQualityChange?.(event);\n\n  /**\n   * Destroy the YouTube Player using its async API and store the promise so we\n   * can await before re-creating it.\n   */\n  destroyPlayer = () => {\n    if (this.internalPlayer) {\n      this.destroyPlayerPromise = this.internalPlayer.destroy().then(() => (this.destroyPlayerPromise = undefined));\n      return this.destroyPlayerPromise;\n    }\n    return Promise.resolve();\n  };\n\n  /**\n   * Initialize the YouTube Player API on the container and attach event handlers\n   */\n  createPlayer = () => {\n    // do not attempt to create a player server-side, it won't work\n    if (typeof document === 'undefined') return;\n    if (this.destroyPlayerPromise) {\n      // We need to first await the existing player to be destroyed before\n      // we can re-create it.\n      this.destroyPlayerPromise.then(this.createPlayer);\n      return;\n    }\n    // create player\n    const playerOpts: Options = {\n      ...this.props.opts,\n      // preload the `videoId` video if one is already given\n      videoId: this.props.videoId,\n    };\n    this.internalPlayer = youTubePlayer(this.container!, playerOpts);\n    // attach event handlers\n    this.internalPlayer.on('ready', this.onPlayerReady as any);\n    this.internalPlayer.on('error', this.onPlayerError as any);\n    this.internalPlayer.on('stateChange', this.onPlayerStateChange as any);\n    this.internalPlayer.on('playbackRateChange', this.onPlayerPlaybackRateChange as any);\n    this.internalPlayer.on('playbackQualityChange', this.onPlayerPlaybackQualityChange as any);\n    if (this.props.title || this.props.loading) {\n      this.internalPlayer.getIframe().then((iframe) => {\n        if (this.props.title) iframe.setAttribute('title', this.props.title);\n        if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      });\n    }\n  };\n\n  /**\n   * Shorthand for destroying and then re-creating the YouTube Player\n   */\n  resetPlayer = () => this.destroyPlayer().then(this.createPlayer);\n\n  /**\n   * Method to update the id and class of the YouTube Player iframe.\n   * React should update this automatically but since the YouTube Player API\n   * replaced the DIV that is mounted by React we need to do this manually.\n   */\n  updatePlayer = () => {\n    this.internalPlayer?.getIframe().then((iframe) => {\n      if (this.props.id) iframe.setAttribute('id', this.props.id);\n      else iframe.removeAttribute('id');\n      if (this.props.iframeClassName) iframe.setAttribute('class', this.props.iframeClassName);\n      else iframe.removeAttribute('class');\n      if (this.props.opts && this.props.opts.width) iframe.setAttribute('width', this.props.opts.width.toString());\n      else iframe.removeAttribute('width');\n      if (this.props.opts && this.props.opts.height) iframe.setAttribute('height', this.props.opts.height.toString());\n      else iframe.removeAttribute('height');\n      if (this.props.title) iframe.setAttribute('title', this.props.title);\n      else iframe.setAttribute('title', 'YouTube video player');\n      if (this.props.loading) iframe.setAttribute('loading', this.props.loading);\n      else iframe.removeAttribute('loading');\n    });\n  };\n\n  /**\n   *  Method to return the internalPlayer object.\n   */\n  getInternalPlayer = () => {\n    return this.internalPlayer;\n  };\n\n  /**\n   * Call YouTube Player API methods to update the currently playing video.\n   * Depending on the `opts.playerVars.autoplay` this function uses one of two\n   * YouTube Player API methods to update the video.\n   */\n  updateVideo = () => {\n    if (typeof this.props.videoId === 'undefined' || this.props.videoId === null) {\n      this.internalPlayer?.stopVideo();\n      return;\n    }\n\n    // set queueing options\n    let autoplay = false;\n    const opts: YoutubePlayerCueVideoOptions = {\n      videoId: this.props.videoId,\n    };\n\n    if (this.props.opts?.playerVars) {\n      autoplay = this.props.opts.playerVars.autoplay === 1;\n      if ('start' in this.props.opts.playerVars) {\n        opts.startSeconds = this.props.opts.playerVars.start;\n      }\n      if ('end' in this.props.opts.playerVars) {\n        opts.endSeconds = this.props.opts.playerVars.end;\n      }\n    }\n\n    // if autoplay is enabled loadVideoById\n    if (autoplay) {\n      this.internalPlayer?.loadVideoById(opts);\n      return;\n    }\n    // default behaviour just cues the video\n    this.internalPlayer?.cueVideoById(opts);\n  };\n\n  refContainer = (container: HTMLDivElement) => {\n    this.container = container;\n  };\n\n  render() {\n    return (\n      <div className={this.props.className} style={this.props.style}>\n        <div id={this.props.id} className={this.props.iframeClassName} ref={this.refContainer} />\n      </div>\n    );\n  }\n}\n\nexport default YouTube;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}