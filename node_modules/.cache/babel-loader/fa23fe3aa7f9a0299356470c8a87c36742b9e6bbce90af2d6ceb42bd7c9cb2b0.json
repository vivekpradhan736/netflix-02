{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport { Component } from '@firebase/component';\nimport { isBrowserExtension, getUA, isReactNative, isNode, isIndexedDBAvailable, isIE, FirebaseError } from '@firebase/util';\nvar name = \"@firebase/auth-compat\";\nvar version = \"0.3.3\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\nfunction _getCurrentScheme() {\n  var _a;\n  return ((_a = self === null || self === void 0 ? void 0 : self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n/**\r\n * @return {boolean} Whether the current environment is http or https.\r\n */\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n/**\r\n * @param {?string=} ua The user agent.\r\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\r\n *     Cordova environment.\r\n */\nfunction _isAndroidOrIosCordovaScheme() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return !!((_getCurrentScheme() === 'file:' || _getCurrentScheme() === 'ionic:' || _getCurrentScheme() === 'capacitor:') && ua.toLowerCase().match(/iphone|ipad|ipod|android/));\n}\n/**\r\n * @return {boolean} Whether the environment is a native environment, where\r\n *     CORS checks do not apply.\r\n */\nfunction _isNativeEnvironment() {\n  return isReactNative() || isNode();\n}\n/**\r\n * Checks whether the user agent is IE11.\r\n * @return {boolean} True if it is IE11.\r\n */\nfunction _isIe11() {\n  return isIE() && (document === null || document === void 0 ? void 0 : document.documentMode) === 11;\n}\n/**\r\n * Checks whether the user agent is Edge.\r\n * @param {string} userAgent The browser user agent string.\r\n * @return {boolean} True if it is Edge.\r\n */\nfunction _isEdge() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return /Edge\\/\\d+/.test(ua);\n}\n/**\r\n * @param {?string=} opt_userAgent The navigator user agent.\r\n * @return {boolean} Whether local storage is not synchronized between an iframe\r\n *     and a popup of the same domain.\r\n */\nfunction _isLocalStorageNotSynchronized() {\n  let ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getUA();\n  return _isIe11() || _isEdge(ua);\n}\n/** @return {boolean} Whether web storage is supported. */\nfunction _isWebStorageSupported() {\n  try {\n    const storage = self.localStorage;\n    const key = exp._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n/**\r\n * @param {?Object=} global The optional global scope.\r\n * @return {boolean} Whether current environment is a worker.\r\n */\nfunction _isWorker() {\n  // WorkerGlobalScope only defined in worker environment.\n  return typeof global !== 'undefined' && 'WorkerGlobalScope' in global && 'importScripts' in global;\n}\nfunction _isPopupRedirectSupported() {\n  return (_isHttpOrHttps() || isBrowserExtension() || _isAndroidOrIosCordovaScheme()) &&\n  // React Native with remote debugging reports its location.protocol as\n  // http.\n  !_isNativeEnvironment() &&\n  // Local storage has to be supported for browser popup and redirect\n  // operations to work.\n  _isWebStorageSupported() &&\n  // DOM, popups and redirects are not supported within a worker.\n  !_isWorker();\n}\n/** Quick check that indicates the platform *may* be Cordova */\nfunction _isLikelyCordova() {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\nasync function _isCordova() {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\nfunction _getSelfWindow() {\n  return typeof window !== 'undefined' ? window : null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\nconst _assert$3 = exp._assert;\nconst PERSISTENCE_KEY = 'persistence';\n/**\r\n * Validates that an argument is a valid persistence value. If an invalid type\r\n * is specified, an error is thrown synchronously.\r\n */\nfunction _validatePersistenceArgument(auth, persistence) {\n  _assert$3(Object.values(Persistence).includes(persistence), auth, \"invalid-persistence-type\" /* exp.AuthErrorCode.INVALID_PERSISTENCE */);\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert$3(persistence !== Persistence.SESSION, auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert$3(persistence === Persistence.NONE, auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert$3(persistence === Persistence.NONE || persistence === Persistence.LOCAL && isIndexedDBAvailable(), auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert$3(persistence === Persistence.NONE || _isWebStorageSupported(), auth, \"unsupported-persistence-type\" /* exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE */);\n}\n\nasync function _savePersistenceForRedirect(auth) {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, auth.config.apiKey, auth.name);\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\nfunction _getPersistencesFromRedirect(apiKey, appName) {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable() {\n  var _a;\n  try {\n    return ((_a = _getSelfWindow()) === null || _a === void 0 ? void 0 : _a.sessionStorage) || null;\n  } catch (e) {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst _assert$2 = exp._assert;\n/** Platform-agnostic popup-redirect resolver */\nclass CompatPopupRedirectResolver {\n  constructor() {\n    // Create both resolvers for dynamic resolution later\n    this.browserResolver = exp._getInstance(exp.browserPopupRedirectResolver);\n    this.cordovaResolver = exp._getInstance(exp.cordovaPopupRedirectResolver);\n    // The actual resolver in use: either browserResolver or cordovaResolver.\n    this.underlyingResolver = null;\n    this._redirectPersistence = exp.browserSessionPersistence;\n    this._completeRedirectFn = exp._getRedirectResult;\n    this._overrideRedirectResult = exp._overrideRedirectResult;\n  }\n  async _initialize(auth) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n  async _openPopup(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(auth, provider, authType, eventId);\n  }\n  async _openRedirect(auth, provider, authType, eventId) {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(auth, provider, authType, eventId);\n  }\n  _isIframeWebStorageSupported(auth, cb) {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n  _originValidation(auth) {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n  get _shouldInitProactively() {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n  get assertedUnderlyingResolver() {\n    _assert$2(this.underlyingResolver, \"internal-error\" /* exp.AuthErrorCode.INTERNAL_ERROR */);\n    return this.underlyingResolver;\n  }\n  async selectUnderlyingResolver() {\n    if (this.underlyingResolver) {\n      return;\n    }\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova ? this.cordovaResolver : this.browserResolver;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction unwrap(object) {\n  return object.unwrap();\n}\nfunction wrapped(object) {\n  return object.wrapped();\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction credentialFromResponse(userCredential) {\n  return credentialFromObject(userCredential);\n}\nfunction attachExtraErrorFields(auth, e) {\n  var _a;\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (_a = e.customData) === null || _a === void 0 ? void 0 : _a._tokenResponse;\n  if ((e === null || e === void 0 ? void 0 : e.code) === 'auth/multi-factor-auth-required') {\n    const mfaErr = e;\n    mfaErr.resolver = new MultiFactorResolver(auth, exp.getMultiFactorResolver(auth, e));\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\nfunction credentialFromObject(object) {\n  const {\n    _tokenResponse\n  } = object instanceof FirebaseError ? object.customData : object;\n  if (!_tokenResponse) {\n    return null;\n  }\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n  const providerId = _tokenResponse.providerId;\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n  let provider;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n  return object instanceof FirebaseError ? provider.credentialFromError(object) : provider.credentialFromResult(object);\n}\nfunction convertCredential(auth, credentialPromise) {\n  return credentialPromise.catch(e => {\n    if (e instanceof FirebaseError) {\n      attachExtraErrorFields(auth, e);\n    }\n    throw e;\n  }).then(credential => {\n    const operationType = credential.operationType;\n    const user = credential.user;\n    return {\n      operationType,\n      credential: credentialFromResponse(credential),\n      additionalUserInfo: exp.getAdditionalUserInfo(credential),\n      user: User.getOrCreate(user)\n    };\n  });\n}\nasync function convertConfirmationResult(auth, confirmationResultPromise) {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: verificationCode => convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\nclass MultiFactorResolver {\n  constructor(auth, resolver) {\n    this.resolver = resolver;\n    this.auth = wrapped(auth);\n  }\n  get session() {\n    return this.resolver.session;\n  }\n  get hints() {\n    return this.resolver.hints;\n  }\n  resolveSignIn(assertion) {\n    return convertCredential(unwrap(this.auth), this.resolver.resolveSignIn(assertion));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass User {\n  constructor(_delegate) {\n    this._delegate = _delegate;\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n  static getOrCreate(user) {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n    return User.USER_MAP.get(user);\n  }\n  delete() {\n    return this._delegate.delete();\n  }\n  reload() {\n    return this._delegate.reload();\n  }\n  toJSON() {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh) {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh) {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(credential) {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(credential) {\n    return convertCredential(this.auth, exp.linkWithCredential(this._delegate, credential));\n  }\n  async linkWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n  async linkWithPopup(provider) {\n    return convertCredential(this.auth, exp.linkWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n  async linkWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n  reauthenticateAndRetrieveDataWithCredential(credential) {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(credential) {\n    return convertCredential(this.auth, exp.reauthenticateWithCredential(this._delegate, credential));\n  }\n  reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this.auth, exp.reauthenticateWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n  reauthenticateWithPopup(provider) {\n    return convertCredential(this.auth, exp.reauthenticateWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n  async reauthenticateWithRedirect(provider) {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n  sendEmailVerification(actionCodeSettings) {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId) {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail) {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword) {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential) {\n    return exp.updatePhoneNumber(this._delegate, phoneCredential);\n  }\n  updateProfile(profile) {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(newEmail, actionCodeSettings) {\n    return exp.verifyBeforeUpdateEmail(this._delegate, newEmail, actionCodeSettings);\n  }\n  get emailVerified() {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous() {\n    return this._delegate.isAnonymous;\n  }\n  get metadata() {\n    return this._delegate.metadata;\n  }\n  get phoneNumber() {\n    return this._delegate.phoneNumber;\n  }\n  get providerData() {\n    return this._delegate.providerData;\n  }\n  get refreshToken() {\n    return this._delegate.refreshToken;\n  }\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n  get displayName() {\n    return this._delegate.displayName;\n  }\n  get email() {\n    return this._delegate.email;\n  }\n  get photoURL() {\n    return this._delegate.photoURL;\n  }\n  get providerId() {\n    return this._delegate.providerId;\n  }\n  get uid() {\n    return this._delegate.uid;\n  }\n  get auth() {\n    return this._delegate.auth;\n  }\n}\n// Maintain a map so that there's always a 1:1 mapping between new User and\n// legacy compat users\nUser.USER_MAP = new WeakMap();\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst _assert$1 = exp._assert;\nclass Auth {\n  constructor(app, provider) {\n    this.app = app;\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate();\n      this.linkUnderlyingAuth();\n      return;\n    }\n    const {\n      apiKey\n    } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert$1(apiKey, \"invalid-api-key\" /* exp.AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    // TODO: platform needs to be determined using heuristics\n    _assert$1(apiKey, \"invalid-api-key\" /* exp.AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    // Only use a popup/redirect resolver in browser environments\n    const resolver = typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    });\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n  get emulatorConfig() {\n    return this._delegate.emulatorConfig;\n  }\n  get currentUser() {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode() {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings() {\n    return this._delegate.settings;\n  }\n  get tenantId() {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage() {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut() {\n    return this._delegate.signOut();\n  }\n  useEmulator(url, options) {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code) {\n    return exp.applyActionCode(this._delegate, code);\n  }\n  checkActionCode(code) {\n    return exp.checkActionCode(this._delegate, code);\n  }\n  confirmPasswordReset(code, newPassword) {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n  async createUserWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.createUserWithEmailAndPassword(this._delegate, email, password));\n  }\n  fetchProvidersForEmail(email) {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email) {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink) {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult() {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* exp.AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    const credential = await exp.getRedirectResult(this._delegate, CompatPopupRedirectResolver);\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework) {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n  onAuthStateChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onAuthStateChanged(next, error, complete);\n  }\n  onIdTokenChanged(nextOrObserver, errorFn, completed) {\n    const {\n      next,\n      error,\n      complete\n    } = wrapObservers(nextOrObserver, errorFn, completed);\n    return this._delegate.onIdTokenChanged(next, error, complete);\n  }\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return exp.sendPasswordResetEmail(this._delegate, email, actionCodeSettings || undefined);\n  }\n  async setPersistence(persistence) {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp._getInstance(exp.indexedDBLocalPersistence)._isAvailable();\n        converted = isIndexedDBFullySupported ? exp.indexedDBLocalPersistence : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(\"argument-error\" /* exp.AuthErrorCode.ARGUMENT_ERROR */, {\n          appName: this._delegate.name\n        });\n    }\n    return this._delegate.setPersistence(converted);\n  }\n  signInAndRetrieveDataWithCredential(credential) {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously() {\n    return convertCredential(this._delegate, exp.signInAnonymously(this._delegate));\n  }\n  signInWithCredential(credential) {\n    return convertCredential(this._delegate, exp.signInWithCredential(this._delegate, credential));\n  }\n  signInWithCustomToken(token) {\n    return convertCredential(this._delegate, exp.signInWithCustomToken(this._delegate, token));\n  }\n  signInWithEmailAndPassword(email, password) {\n    return convertCredential(this._delegate, exp.signInWithEmailAndPassword(this._delegate, email, password));\n  }\n  signInWithEmailLink(email, emailLink) {\n    return convertCredential(this._delegate, exp.signInWithEmailLink(this._delegate, email, emailLink));\n  }\n  signInWithPhoneNumber(phoneNumber, applicationVerifier) {\n    return convertConfirmationResult(this._delegate, exp.signInWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier));\n  }\n  async signInWithPopup(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* exp.AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    return convertCredential(this._delegate, exp.signInWithPopup(this._delegate, provider, CompatPopupRedirectResolver));\n  }\n  async signInWithRedirect(provider) {\n    _assert$1(_isPopupRedirectSupported(), this._delegate, \"operation-not-supported-in-this-environment\" /* exp.AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(this._delegate, provider, CompatPopupRedirectResolver);\n  }\n  updateCurrentUser(user) {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code) {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap() {\n    return this._delegate;\n  }\n  _delete() {\n    return this._delegate._delete();\n  }\n  linkUnderlyingAuth() {\n    this._delegate.wrapped = () => this;\n  }\n}\nAuth.Persistence = Persistence;\nfunction wrapObservers(nextOrObserver, error, complete) {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({\n      next,\n      error,\n      complete\n    } = nextOrObserver);\n  }\n  // We know 'next' is now a function\n  const oldNext = next;\n  const newNext = user => oldNext(user && User.getOrCreate(user));\n  return {\n    next: newNext,\n    error: error,\n    complete\n  };\n}\nfunction buildPersistenceHierarchy(apiKey, appName) {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n  // If \"self\" is available, add indexedDB\n  if (typeof self !== 'undefined' && !persistences.includes(exp.indexedDBLocalPersistence)) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [exp.browserLocalPersistence, exp.browserSessionPersistence]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n  return persistences;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass PhoneAuthProvider {\n  constructor() {\n    this.providerId = 'phone';\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth()));\n  }\n  static credential(verificationId, verificationCode) {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n  verifyPhoneNumber(phoneInfoOptions, applicationVerifier) {\n    return this._delegate.verifyPhoneNumber(\n    // The implementation matches but the types are subtly incompatible\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    phoneInfoOptions, applicationVerifier);\n  }\n  unwrap() {\n    return this._delegate;\n  }\n}\nPhoneAuthProvider.PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\nPhoneAuthProvider.PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst _assert = exp._assert;\nclass RecaptchaVerifier {\n  constructor(container, parameters) {\n    let app = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firebase.app();\n    var _a;\n    // API key is required for web client RPC calls.\n    _assert((_a = app.options) === null || _a === void 0 ? void 0 : _a.apiKey, \"invalid-api-key\" /* exp.AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(container,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    parameters,\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    app.auth());\n    this.type = this._delegate.type;\n  }\n  clear() {\n    this._delegate.clear();\n  }\n  render() {\n    return this._delegate.render();\n  }\n  verify() {\n    return this._delegate.verify();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst AUTH_TYPE = 'auth-compat';\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance) {\n  instance.INTERNAL.registerComponent(new Component(AUTH_TYPE, container => {\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app-compat').getImmediate();\n    const authProvider = container.getProvider('auth');\n    return new Auth(app, authProvider);\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */).setServiceProps({\n    ActionCodeInfo: {\n      Operation: {\n        EMAIL_SIGNIN: exp.ActionCodeOperation.EMAIL_SIGNIN,\n        PASSWORD_RESET: exp.ActionCodeOperation.PASSWORD_RESET,\n        RECOVER_EMAIL: exp.ActionCodeOperation.RECOVER_EMAIL,\n        REVERT_SECOND_FACTOR_ADDITION: exp.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n        VERIFY_AND_CHANGE_EMAIL: exp.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n        VERIFY_EMAIL: exp.ActionCodeOperation.VERIFY_EMAIL\n      }\n    },\n    EmailAuthProvider: exp.EmailAuthProvider,\n    FacebookAuthProvider: exp.FacebookAuthProvider,\n    GithubAuthProvider: exp.GithubAuthProvider,\n    GoogleAuthProvider: exp.GoogleAuthProvider,\n    OAuthProvider: exp.OAuthProvider,\n    SAMLAuthProvider: exp.SAMLAuthProvider,\n    PhoneAuthProvider: PhoneAuthProvider,\n    PhoneMultiFactorGenerator: exp.PhoneMultiFactorGenerator,\n    RecaptchaVerifier: RecaptchaVerifier,\n    TwitterAuthProvider: exp.TwitterAuthProvider,\n    Auth,\n    AuthCredential: exp.AuthCredential,\n    Error: FirebaseError\n  }).setInstantiationMode(\"LAZY\" /* InstantiationMode.LAZY */).setMultipleInstances(false));\n  instance.registerVersion(name, version);\n}\nregisterAuthCompat(firebase);","map":{"version":3,"mappings":"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","names":["CORDOVA_ONDEVICEREADY_TIMEOUT_MS","_getCurrentScheme","self","location","protocol","_isHttpOrHttps","ua","getUA","toLowerCase","match","_isNativeEnvironment","isReactNative","isNode","_isIe11","isIE","document","documentMode","_isEdge","test","_isLocalStorageNotSynchronized","_isWebStorageSupported","storage","localStorage","key","impl","_generateEventId","isIndexedDBAvailable","e","_isWorker","global","_isPopupRedirectSupported","isBrowserExtension","_isAndroidOrIosCordovaScheme","_isLikelyCordova","_isCordova","Promise","resolve","timeoutId","setTimeout","addEventListener","clearTimeout","_getSelfWindow","window","Persistence","LOCAL","NONE","SESSION","_assert","exp","PERSISTENCE_KEY","auth","persistence","Object","values","includes","_savePersistenceForRedirect","_initializationPromise","session","getSessionStorageIfAvailable","_persistenceKeyName","config","apiKey","name","setItem","_getPersistence","appName","getItem","inMemoryPersistence","indexedDBLocalPersistence","browserSessionPersistence","sessionStorage","CompatPopupRedirectResolver","constructor","_getInstance","browserPopupRedirectResolver","cordovaPopupRedirectResolver","_getRedirectResult","_overrideRedirectResult","_initialize","selectUnderlyingResolver","assertedUnderlyingResolver","_openPopup","provider","authType","eventId","_openRedirect","_isIframeWebStorageSupported","cb","_originValidation","_shouldInitProactively","browserResolver","underlyingResolver","isCordova","cordovaResolver","unwrap","object","wrapped","credentialFromResponse","userCredential","credentialFromObject","attachExtraErrorFields","response","_a","customData","_tokenResponse","code","mfaErr","resolver","MultiFactorResolver","getMultiFactorResolver","credential","credErr","tenantId","undefined","email","phoneNumber","FirebaseError","PhoneAuthProvider","credentialFromResult","providerId","ProviderId","PASSWORD","GOOGLE","GoogleAuthProvider","FACEBOOK","FacebookAuthProvider","GITHUB","GithubAuthProvider","TWITTER","TwitterAuthProvider","oauthIdToken","oauthAccessToken","oauthTokenSecret","pendingToken","nonce","startsWith","SAMLAuthCredential","_create","OAuthCredential","_fromParams","signInMethod","idToken","accessToken","OAuthProvider","rawNonce","credentialFromError","credentialPromise","catch","then","operationType","user","additionalUserInfo","getAdditionalUserInfo","User","getOrCreate","convertConfirmationResult","confirmationResultPromise","confirmationResultExp","verificationId","confirm","verificationCode","convertCredential","hints","resolveSignIn","assertion","_delegate","multiFactor","USER_MAP","has","set","get","delete","reload","toJSON","getIdTokenResult","forceRefresh","getIdToken","linkAndRetrieveDataWithCredential","linkWithCredential","linkWithPhoneNumber","applicationVerifier","linkWithPopup","linkWithRedirect","_castAuth","reauthenticateAndRetrieveDataWithCredential","reauthenticateWithCredential","reauthenticateWithPhoneNumber","reauthenticateWithPopup","reauthenticateWithRedirect","sendEmailVerification","actionCodeSettings","unlink","updateEmail","newEmail","updatePassword","newPassword","updatePhoneNumber","phoneCredential","updateProfile","profile","verifyBeforeUpdateEmail","emailVerified","isAnonymous","metadata","providerData","refreshToken","displayName","photoURL","uid","WeakMap","Auth","app","isInitialized","getImmediate","linkUnderlyingAuth","options","initialize","buildPersistenceHierarchy","popupRedirectResolver","_updateErrorMap","debugErrorMap","emulatorConfig","currentUser","languageCode","settings","tid","useDeviceLanguage","signOut","useEmulator","url","connectAuthEmulator","applyActionCode","checkActionCode","confirmPasswordReset","createUserWithEmailAndPassword","password","fetchProvidersForEmail","fetchSignInMethodsForEmail","isSignInWithEmailLink","emailLink","getRedirectResult","addFrameworkForLogging","framework","onAuthStateChanged","nextOrObserver","errorFn","completed","next","error","complete","wrapObservers","onIdTokenChanged","sendSignInLinkToEmail","sendPasswordResetEmail","setPersistence","_validatePersistenceArgument","converted","isIndexedDBFullySupported","_isAvailable","browserLocalPersistence","_fail","signInAndRetrieveDataWithCredential","signInWithCredential","signInAnonymously","signInWithCustomToken","token","signInWithEmailAndPassword","signInWithEmailLink","signInWithPhoneNumber","signInWithPopup","signInWithRedirect","updateCurrentUser","verifyPasswordResetCode","_delete","oldNext","newNext","persistences","_getPersistencesFromRedirect","push","firebase","verifyPhoneNumber","phoneInfoOptions","PHONE_SIGN_IN_METHOD","PROVIDER_ID","RecaptchaVerifier","parameters","container","type","clear","render","verify","AUTH_TYPE","registerAuthCompat","instance","INTERNAL","registerComponent","Component","getProvider","authProvider","setServiceProps","ActionCodeInfo","Operation","EMAIL_SIGNIN","ActionCodeOperation","PASSWORD_RESET","RECOVER_EMAIL","REVERT_SECOND_FACTOR_ADDITION","VERIFY_AND_CHANGE_EMAIL","VERIFY_EMAIL","EmailAuthProvider","SAMLAuthProvider","CompatAuthProvider","PhoneMultiFactorGenerator","CompatRecaptchaVerifier","AuthCredential","Error","setInstantiationMode","setMultipleInstances","registerVersion","version"],"sources":["C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\platform.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\persistence.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\popup_redirect.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\wrap.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\user_credential.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\user.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\auth.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\phone_auth_provider.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\src\\recaptcha_verifier.ts","C:\\Users\\Vivek\\OneDrive\\Documents\\React JS Tutorial\\Project_01-Netflix\\netflix-clone02\\netflix-clone02\\node_modules\\@firebase\\auth-compat\\index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as impl from '@firebase/auth/internal';\nimport {\n  getUA,\n  isBrowserExtension,\n  isReactNative,\n  isNode,\n  isIE,\n  isIndexedDBAvailable\n} from '@firebase/util';\n\ndeclare global {\n  interface Document {\n    documentMode?: number;\n  }\n}\n\nconst CORDOVA_ONDEVICEREADY_TIMEOUT_MS = 1000;\n\nfunction _getCurrentScheme(): string | null {\n  return self?.location?.protocol || null;\n}\n\n/**\n * @return {boolean} Whether the current environment is http or https.\n */\nfunction _isHttpOrHttps(): boolean {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\n\n/**\n * @param {?string=} ua The user agent.\n * @return {boolean} Whether the app is rendered in a mobile iOS or Android\n *     Cordova environment.\n */\nexport function _isAndroidOrIosCordovaScheme(ua: string = getUA()): boolean {\n  return !!(\n    (_getCurrentScheme() === 'file:' ||\n      _getCurrentScheme() === 'ionic:' ||\n      _getCurrentScheme() === 'capacitor:') &&\n    ua.toLowerCase().match(/iphone|ipad|ipod|android/)\n  );\n}\n\n/**\n * @return {boolean} Whether the environment is a native environment, where\n *     CORS checks do not apply.\n */\nfunction _isNativeEnvironment(): boolean {\n  return isReactNative() || isNode();\n}\n\n/**\n * Checks whether the user agent is IE11.\n * @return {boolean} True if it is IE11.\n */\nfunction _isIe11(): boolean {\n  return isIE() && document?.documentMode === 11;\n}\n\n/**\n * Checks whether the user agent is Edge.\n * @param {string} userAgent The browser user agent string.\n * @return {boolean} True if it is Edge.\n */\nfunction _isEdge(ua: string = getUA()): boolean {\n  return /Edge\\/\\d+/.test(ua);\n}\n\n/**\n * @param {?string=} opt_userAgent The navigator user agent.\n * @return {boolean} Whether local storage is not synchronized between an iframe\n *     and a popup of the same domain.\n */\nfunction _isLocalStorageNotSynchronized(ua: string = getUA()): boolean {\n  return _isIe11() || _isEdge(ua);\n}\n\n/** @return {boolean} Whether web storage is supported. */\nexport function _isWebStorageSupported(): boolean {\n  try {\n    const storage = self.localStorage;\n    const key = impl._generateEventId();\n    if (storage) {\n      // setItem will throw an exception if we cannot access WebStorage (e.g.,\n      // Safari in private mode).\n      storage['setItem'](key, '1');\n      storage['removeItem'](key);\n      // For browsers where iframe web storage does not synchronize with a popup\n      // of the same domain, indexedDB is used for persistent storage. These\n      // browsers include IE11 and Edge.\n      // Make sure it is supported (IE11 and Edge private mode does not support\n      // that).\n      if (_isLocalStorageNotSynchronized()) {\n        // In such browsers, if indexedDB is not supported, an iframe cannot be\n        // notified of the popup sign in result.\n        return isIndexedDBAvailable();\n      }\n      return true;\n    }\n  } catch (e) {\n    // localStorage is not available from a worker. Test availability of\n    // indexedDB.\n    return _isWorker() && isIndexedDBAvailable();\n  }\n  return false;\n}\n\n/**\n * @param {?Object=} global The optional global scope.\n * @return {boolean} Whether current environment is a worker.\n */\nexport function _isWorker(): boolean {\n  // WorkerGlobalScope only defined in worker environment.\n  return (\n    typeof global !== 'undefined' &&\n    'WorkerGlobalScope' in global &&\n    'importScripts' in global\n  );\n}\n\nexport function _isPopupRedirectSupported(): boolean {\n  return (\n    (_isHttpOrHttps() ||\n      isBrowserExtension() ||\n      _isAndroidOrIosCordovaScheme()) &&\n    // React Native with remote debugging reports its location.protocol as\n    // http.\n    !_isNativeEnvironment() &&\n    // Local storage has to be supported for browser popup and redirect\n    // operations to work.\n    _isWebStorageSupported() &&\n    // DOM, popups and redirects are not supported within a worker.\n    !_isWorker()\n  );\n}\n\n/** Quick check that indicates the platform *may* be Cordova */\nexport function _isLikelyCordova(): boolean {\n  return _isAndroidOrIosCordovaScheme() && typeof document !== 'undefined';\n}\n\nexport async function _isCordova(): Promise<boolean> {\n  if (!_isLikelyCordova()) {\n    return false;\n  }\n\n  return new Promise(resolve => {\n    const timeoutId = setTimeout(() => {\n      // We've waited long enough; the telltale Cordova event didn't happen\n      resolve(false);\n    }, CORDOVA_ONDEVICEREADY_TIMEOUT_MS);\n\n    document.addEventListener('deviceready', () => {\n      clearTimeout(timeoutId);\n      resolve(true);\n    });\n  });\n}\n\nexport function _getSelfWindow(): Window | null {\n  return typeof window !== 'undefined' ? window : null;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { isIndexedDBAvailable, isNode, isReactNative } from '@firebase/util';\nimport { _getSelfWindow, _isWebStorageSupported, _isWorker } from './platform';\n\nexport const Persistence = {\n  LOCAL: 'local',\n  NONE: 'none',\n  SESSION: 'session'\n};\n\nconst _assert: typeof exp._assert = exp._assert;\n\nconst PERSISTENCE_KEY = 'persistence';\n\n/**\n * Validates that an argument is a valid persistence value. If an invalid type\n * is specified, an error is thrown synchronously.\n */\nexport function _validatePersistenceArgument(\n  auth: exp.Auth,\n  persistence: string\n): void {\n  _assert(\n    Object.values(Persistence).includes(persistence),\n    auth,\n    exp.AuthErrorCode.INVALID_PERSISTENCE\n  );\n  // Validate if the specified type is supported in the current environment.\n  if (isReactNative()) {\n    // This is only supported in a browser.\n    _assert(\n      persistence !== Persistence.SESSION,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (isNode()) {\n    // Only none is supported in Node.js.\n    _assert(\n      persistence === Persistence.NONE,\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  if (_isWorker()) {\n    // In a worker environment, either LOCAL or NONE are supported.\n    // If indexedDB not supported and LOCAL provided, throw an error\n    _assert(\n      persistence === Persistence.NONE ||\n        (persistence === Persistence.LOCAL && isIndexedDBAvailable()),\n      auth,\n      exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n    );\n    return;\n  }\n  // This is restricted by what the browser supports.\n  _assert(\n    persistence === Persistence.NONE || _isWebStorageSupported(),\n    auth,\n    exp.AuthErrorCode.UNSUPPORTED_PERSISTENCE\n  );\n}\n\nexport async function _savePersistenceForRedirect(\n  auth: exp.AuthInternal\n): Promise<void> {\n  await auth._initializationPromise;\n  const session = getSessionStorageIfAvailable();\n  const key = exp._persistenceKeyName(\n    PERSISTENCE_KEY,\n    auth.config.apiKey,\n    auth.name\n  );\n  if (session) {\n    session.setItem(key, auth._getPersistence());\n  }\n}\n\nexport function _getPersistencesFromRedirect(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  const session = getSessionStorageIfAvailable();\n  if (!session) {\n    return [];\n  }\n\n  const key = exp._persistenceKeyName(PERSISTENCE_KEY, apiKey, appName);\n  const persistence = session.getItem(key);\n\n  switch (persistence) {\n    case Persistence.NONE:\n      return [exp.inMemoryPersistence];\n    case Persistence.LOCAL:\n      return [exp.indexedDBLocalPersistence, exp.browserSessionPersistence];\n    case Persistence.SESSION:\n      return [exp.browserSessionPersistence];\n    default:\n      return [];\n  }\n}\n\n/** Returns session storage, or null if the property access errors */\nfunction getSessionStorageIfAvailable(): Storage | null {\n  try {\n    return _getSelfWindow()?.sessionStorage || null;\n  } catch (e) {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport { _isCordova, _isLikelyCordova } from './platform';\n\nconst _assert: typeof exp._assert = exp._assert;\n\n/** Platform-agnostic popup-redirect resolver */\nexport class CompatPopupRedirectResolver\n  implements exp.PopupRedirectResolverInternal\n{\n  // Create both resolvers for dynamic resolution later\n  private readonly browserResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.browserPopupRedirectResolver);\n  private readonly cordovaResolver: exp.PopupRedirectResolverInternal =\n    exp._getInstance(exp.cordovaPopupRedirectResolver);\n  // The actual resolver in use: either browserResolver or cordovaResolver.\n  private underlyingResolver: exp.PopupRedirectResolverInternal | null = null;\n  _redirectPersistence = exp.browserSessionPersistence;\n\n  _completeRedirectFn: (\n    auth: exp.Auth,\n    resolver: exp.PopupRedirectResolver,\n    bypassAuthState: boolean\n  ) => Promise<exp.UserCredential | null> = exp._getRedirectResult;\n  _overrideRedirectResult = exp._overrideRedirectResult;\n\n  async _initialize(auth: exp.AuthImpl): Promise<exp.EventManager> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._initialize(auth);\n  }\n\n  async _openPopup(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<exp.AuthPopup> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openPopup(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  async _openRedirect(\n    auth: exp.AuthImpl,\n    provider: exp.AuthProvider,\n    authType: exp.AuthEventType,\n    eventId?: string\n  ): Promise<void> {\n    await this.selectUnderlyingResolver();\n    return this.assertedUnderlyingResolver._openRedirect(\n      auth,\n      provider,\n      authType,\n      eventId\n    );\n  }\n\n  _isIframeWebStorageSupported(\n    auth: exp.AuthImpl,\n    cb: (support: boolean) => unknown\n  ): void {\n    this.assertedUnderlyingResolver._isIframeWebStorageSupported(auth, cb);\n  }\n\n  _originValidation(auth: exp.Auth): Promise<void> {\n    return this.assertedUnderlyingResolver._originValidation(auth);\n  }\n\n  get _shouldInitProactively(): boolean {\n    return _isLikelyCordova() || this.browserResolver._shouldInitProactively;\n  }\n\n  private get assertedUnderlyingResolver(): exp.PopupRedirectResolverInternal {\n    _assert(this.underlyingResolver, exp.AuthErrorCode.INTERNAL_ERROR);\n    return this.underlyingResolver;\n  }\n\n  private async selectUnderlyingResolver(): Promise<void> {\n    if (this.underlyingResolver) {\n      return;\n    }\n\n    // We haven't yet determined whether or not we're in Cordova; go ahead\n    // and determine that state now.\n    const isCordova = await _isCordova();\n    this.underlyingResolver = isCordova\n      ? this.cordovaResolver\n      : this.browserResolver;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Forward direction wrapper from Compat --unwrap-> Exp */\nexport interface Wrapper<T> {\n  unwrap(): T;\n}\n\n/** Reverse direction wrapper from Exp --wrapped--> Compat */\nexport interface ReverseWrapper<T> {\n  wrapped(): T;\n}\n\nexport function unwrap<T>(object: unknown): T {\n  return (object as Wrapper<T>).unwrap();\n}\n\nexport function wrapped<T>(object: unknown): T {\n  return (object as ReverseWrapper<T>).wrapped();\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { FirebaseError } from '@firebase/util';\nimport { Auth } from './auth';\nimport { User } from './user';\nimport { unwrap, wrapped } from './wrap';\n\nfunction credentialFromResponse(\n  userCredential: exp.UserCredentialInternal\n): exp.AuthCredential | null {\n  return credentialFromObject(userCredential);\n}\n\nfunction attachExtraErrorFields(auth: exp.Auth, e: FirebaseError): void {\n  // The response contains all fields from the server which may or may not\n  // actually match the underlying type\n  const response = (e.customData as exp.TaggedWithTokenResponse | undefined)\n    ?._tokenResponse as unknown as Record<string, string>;\n  if ((e as FirebaseError)?.code === 'auth/multi-factor-auth-required') {\n    const mfaErr = e as compat.MultiFactorError;\n    mfaErr.resolver = new MultiFactorResolver(\n      auth,\n      exp.getMultiFactorResolver(auth, e as exp.MultiFactorError)\n    );\n  } else if (response) {\n    const credential = credentialFromObject(e);\n    const credErr = e as compat.AuthError;\n    if (credential) {\n      credErr.credential = credential;\n      credErr.tenantId = response.tenantId || undefined;\n      credErr.email = response.email || undefined;\n      credErr.phoneNumber = response.phoneNumber || undefined;\n    }\n  }\n}\n\nfunction credentialFromObject(\n  object: FirebaseError | exp.UserCredential\n): exp.AuthCredential | null {\n  const { _tokenResponse } = (\n    object instanceof FirebaseError ? object.customData : object\n  ) as exp.TaggedWithTokenResponse;\n  if (!_tokenResponse) {\n    return null;\n  }\n\n  // Handle phone Auth credential responses, as they have a different format\n  // from other backend responses (i.e. no providerId). This is also only the\n  // case for user credentials (does not work for errors).\n  if (!(object instanceof FirebaseError)) {\n    if ('temporaryProof' in _tokenResponse && 'phoneNumber' in _tokenResponse) {\n      return exp.PhoneAuthProvider.credentialFromResult(object);\n    }\n  }\n\n  const providerId = _tokenResponse.providerId;\n\n  // Email and password is not supported as there is no situation where the\n  // server would return the password to the client.\n  if (!providerId || providerId === exp.ProviderId.PASSWORD) {\n    return null;\n  }\n\n  let provider: Pick<\n    typeof exp.OAuthProvider,\n    'credentialFromResult' | 'credentialFromError'\n  >;\n  switch (providerId) {\n    case exp.ProviderId.GOOGLE:\n      provider = exp.GoogleAuthProvider;\n      break;\n    case exp.ProviderId.FACEBOOK:\n      provider = exp.FacebookAuthProvider;\n      break;\n    case exp.ProviderId.GITHUB:\n      provider = exp.GithubAuthProvider;\n      break;\n    case exp.ProviderId.TWITTER:\n      provider = exp.TwitterAuthProvider;\n      break;\n    default:\n      const {\n        oauthIdToken,\n        oauthAccessToken,\n        oauthTokenSecret,\n        pendingToken,\n        nonce\n      } = _tokenResponse as exp.SignInWithIdpResponse;\n      if (\n        !oauthAccessToken &&\n        !oauthTokenSecret &&\n        !oauthIdToken &&\n        !pendingToken\n      ) {\n        return null;\n      }\n      // TODO(avolkovi): uncomment this and get it working with SAML & OIDC\n      if (pendingToken) {\n        if (providerId.startsWith('saml.')) {\n          return exp.SAMLAuthCredential._create(providerId, pendingToken);\n        } else {\n          // OIDC and non-default providers excluding Twitter.\n          return exp.OAuthCredential._fromParams({\n            providerId,\n            signInMethod: providerId,\n            pendingToken,\n            idToken: oauthIdToken,\n            accessToken: oauthAccessToken\n          });\n        }\n      }\n      return new exp.OAuthProvider(providerId).credential({\n        idToken: oauthIdToken,\n        accessToken: oauthAccessToken,\n        rawNonce: nonce\n      });\n  }\n\n  return object instanceof FirebaseError\n    ? provider.credentialFromError(object)\n    : provider.credentialFromResult(object);\n}\n\nexport function convertCredential(\n  auth: exp.Auth,\n  credentialPromise: Promise<exp.UserCredential>\n): Promise<compat.UserCredential> {\n  return credentialPromise\n    .catch(e => {\n      if (e instanceof FirebaseError) {\n        attachExtraErrorFields(auth, e);\n      }\n      throw e;\n    })\n    .then(credential => {\n      const operationType = credential.operationType;\n      const user = credential.user;\n\n      return {\n        operationType,\n        credential: credentialFromResponse(\n          credential as exp.UserCredentialInternal\n        ),\n        additionalUserInfo: exp.getAdditionalUserInfo(\n          credential as exp.UserCredential\n        ),\n        user: User.getOrCreate(user)\n      };\n    });\n}\n\nexport async function convertConfirmationResult(\n  auth: exp.Auth,\n  confirmationResultPromise: Promise<exp.ConfirmationResult>\n): Promise<compat.ConfirmationResult> {\n  const confirmationResultExp = await confirmationResultPromise;\n  return {\n    verificationId: confirmationResultExp.verificationId,\n    confirm: (verificationCode: string) =>\n      convertCredential(auth, confirmationResultExp.confirm(verificationCode))\n  };\n}\n\nclass MultiFactorResolver implements compat.MultiFactorResolver {\n  readonly auth: Auth;\n  constructor(\n    auth: exp.Auth,\n    private readonly resolver: exp.MultiFactorResolver\n  ) {\n    this.auth = wrapped(auth);\n  }\n\n  get session(): compat.MultiFactorSession {\n    return this.resolver.session;\n  }\n\n  get hints(): compat.MultiFactorInfo[] {\n    return this.resolver.hints;\n  }\n\n  resolveSignIn(\n    assertion: compat.MultiFactorAssertion\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      unwrap(this.auth),\n      this.resolver.resolveSignIn(assertion as exp.MultiFactorAssertion)\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\nimport { _savePersistenceForRedirect } from './persistence';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\n\nexport class User implements compat.User, Compat<exp.User> {\n  // Maintain a map so that there's always a 1:1 mapping between new User and\n  // legacy compat users\n  private static readonly USER_MAP = new WeakMap<exp.User, User>();\n\n  readonly multiFactor: compat.MultiFactorUser;\n\n  private constructor(readonly _delegate: exp.User) {\n    this.multiFactor = exp.multiFactor(_delegate);\n  }\n\n  static getOrCreate(user: exp.User): User {\n    if (!User.USER_MAP.has(user)) {\n      User.USER_MAP.set(user, new User(user));\n    }\n\n    return User.USER_MAP.get(user)!;\n  }\n\n  delete(): Promise<void> {\n    return this._delegate.delete();\n  }\n  reload(): Promise<void> {\n    return this._delegate.reload();\n  }\n  toJSON(): object {\n    return this._delegate.toJSON();\n  }\n  getIdTokenResult(forceRefresh?: boolean): Promise<compat.IdTokenResult> {\n    return this._delegate.getIdTokenResult(forceRefresh);\n  }\n  getIdToken(forceRefresh?: boolean): Promise<string> {\n    return this._delegate.getIdToken(forceRefresh);\n  }\n  linkAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.linkWithCredential(credential);\n  }\n  async linkWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  async linkWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.linkWithPhoneNumber(this._delegate, phoneNumber, applicationVerifier)\n    );\n  }\n  async linkWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.linkWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async linkWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.linkWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  reauthenticateAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.reauthenticateWithCredential(credential);\n  }\n  async reauthenticateWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth as unknown as exp.Auth,\n      exp.reauthenticateWithCredential(\n        this._delegate,\n        credential as exp.AuthCredential\n      )\n    );\n  }\n  reauthenticateWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this.auth,\n      exp.reauthenticateWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  reauthenticateWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this.auth,\n      exp.reauthenticateWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async reauthenticateWithRedirect(\n    provider: compat.AuthProvider\n  ): Promise<void> {\n    await _savePersistenceForRedirect(exp._castAuth(this.auth));\n    return exp.reauthenticateWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  sendEmailVerification(\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendEmailVerification(this._delegate, actionCodeSettings);\n  }\n  async unlink(providerId: string): Promise<compat.User> {\n    await exp.unlink(this._delegate, providerId);\n    return this;\n  }\n  updateEmail(newEmail: string): Promise<void> {\n    return exp.updateEmail(this._delegate, newEmail);\n  }\n  updatePassword(newPassword: string): Promise<void> {\n    return exp.updatePassword(this._delegate, newPassword);\n  }\n  updatePhoneNumber(phoneCredential: compat.AuthCredential): Promise<void> {\n    return exp.updatePhoneNumber(\n      this._delegate,\n      phoneCredential as exp.PhoneAuthCredential\n    );\n  }\n  updateProfile(profile: {\n    displayName?: string | null;\n    photoURL?: string | null;\n  }): Promise<void> {\n    return exp.updateProfile(this._delegate, profile);\n  }\n  verifyBeforeUpdateEmail(\n    newEmail: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.verifyBeforeUpdateEmail(\n      this._delegate,\n      newEmail,\n      actionCodeSettings\n    );\n  }\n  get emailVerified(): boolean {\n    return this._delegate.emailVerified;\n  }\n  get isAnonymous(): boolean {\n    return this._delegate.isAnonymous;\n  }\n  get metadata(): compat.UserMetadata {\n    return this._delegate.metadata;\n  }\n  get phoneNumber(): string | null {\n    return this._delegate.phoneNumber;\n  }\n  get providerData(): Array<compat.UserInfo | null> {\n    return this._delegate.providerData;\n  }\n  get refreshToken(): string {\n    return this._delegate.refreshToken;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  get displayName(): string | null {\n    return this._delegate.displayName;\n  }\n  get email(): string | null {\n    return this._delegate.email;\n  }\n  get photoURL(): string | null {\n    return this._delegate.photoURL;\n  }\n  get providerId(): string {\n    return this._delegate.providerId;\n  }\n  get uid(): string {\n    return this._delegate.uid;\n  }\n  private get auth(): exp.Auth {\n    return (this._delegate as exp.UserImpl).auth as unknown as exp.Auth;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Provider } from '@firebase/component';\nimport { ErrorFn, Observer, Unsubscribe } from '@firebase/util';\n\nimport {\n  _validatePersistenceArgument,\n  Persistence,\n  _getPersistencesFromRedirect,\n  _savePersistenceForRedirect\n} from './persistence';\nimport { _isPopupRedirectSupported } from './platform';\nimport { CompatPopupRedirectResolver } from './popup_redirect';\nimport { User } from './user';\nimport {\n  convertConfirmationResult,\n  convertCredential\n} from './user_credential';\nimport { ReverseWrapper, Wrapper } from './wrap';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class Auth\n  implements compat.FirebaseAuth, Wrapper<exp.Auth>, _FirebaseService\n{\n  static Persistence = Persistence;\n  readonly _delegate: exp.AuthImpl;\n\n  constructor(readonly app: FirebaseApp, provider: Provider<'auth'>) {\n    if (provider.isInitialized()) {\n      this._delegate = provider.getImmediate() as exp.AuthImpl;\n      this.linkUnderlyingAuth();\n      return;\n    }\n\n    const { apiKey } = app.options;\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // TODO: platform needs to be determined using heuristics\n    _assert(apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n\n    // Only use a popup/redirect resolver in browser environments\n    const resolver =\n      typeof window !== 'undefined' ? CompatPopupRedirectResolver : undefined;\n    this._delegate = provider.initialize({\n      options: {\n        persistence: buildPersistenceHierarchy(apiKey, app.name),\n        popupRedirectResolver: resolver\n      }\n    }) as exp.AuthImpl;\n\n    this._delegate._updateErrorMap(exp.debugErrorMap);\n    this.linkUnderlyingAuth();\n  }\n\n  get emulatorConfig(): compat.EmulatorConfig | null {\n    return this._delegate.emulatorConfig;\n  }\n\n  get currentUser(): compat.User | null {\n    if (!this._delegate.currentUser) {\n      return null;\n    }\n\n    return User.getOrCreate(this._delegate.currentUser);\n  }\n  get languageCode(): string | null {\n    return this._delegate.languageCode;\n  }\n  set languageCode(languageCode: string | null) {\n    this._delegate.languageCode = languageCode;\n  }\n  get settings(): compat.AuthSettings {\n    return this._delegate.settings;\n  }\n  get tenantId(): string | null {\n    return this._delegate.tenantId;\n  }\n  set tenantId(tid: string | null) {\n    this._delegate.tenantId = tid;\n  }\n  useDeviceLanguage(): void {\n    this._delegate.useDeviceLanguage();\n  }\n  signOut(): Promise<void> {\n    return this._delegate.signOut();\n  }\n  useEmulator(url: string, options?: { disableWarnings: boolean }): void {\n    exp.connectAuthEmulator(this._delegate, url, options);\n  }\n  applyActionCode(code: string): Promise<void> {\n    return exp.applyActionCode(this._delegate, code);\n  }\n\n  checkActionCode(code: string): Promise<compat.ActionCodeInfo> {\n    return exp.checkActionCode(this._delegate, code);\n  }\n\n  confirmPasswordReset(code: string, newPassword: string): Promise<void> {\n    return exp.confirmPasswordReset(this._delegate, code, newPassword);\n  }\n\n  async createUserWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.createUserWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  fetchProvidersForEmail(email: string): Promise<string[]> {\n    return this.fetchSignInMethodsForEmail(email);\n  }\n  fetchSignInMethodsForEmail(email: string): Promise<string[]> {\n    return exp.fetchSignInMethodsForEmail(this._delegate, email);\n  }\n  isSignInWithEmailLink(emailLink: string): boolean {\n    return exp.isSignInWithEmailLink(this._delegate, emailLink);\n  }\n  async getRedirectResult(): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    const credential = await exp.getRedirectResult(\n      this._delegate,\n      CompatPopupRedirectResolver\n    );\n    if (!credential) {\n      return {\n        credential: null,\n        user: null\n      };\n    }\n    return convertCredential(this._delegate, Promise.resolve(credential));\n  }\n\n  // This function should only be called by frameworks (e.g. FirebaseUI-web) to log their usage.\n  // It is not intended for direct use by developer apps. NO jsdoc here to intentionally leave it\n  // out of autogenerated documentation pages to reduce accidental misuse.\n  addFrameworkForLogging(framework: string): void {\n    exp.addFrameworkForLogging(this._delegate, framework);\n  }\n\n  onAuthStateChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onAuthStateChanged(next!, error, complete);\n  }\n  onIdTokenChanged(\n    nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n    errorFn?: (error: compat.Error) => unknown,\n    completed?: Unsubscribe\n  ): Unsubscribe {\n    const { next, error, complete } = wrapObservers(\n      nextOrObserver,\n      errorFn,\n      completed\n    );\n    return this._delegate.onIdTokenChanged(next!, error, complete);\n  }\n  sendSignInLinkToEmail(\n    email: string,\n    actionCodeSettings: compat.ActionCodeSettings\n  ): Promise<void> {\n    return exp.sendSignInLinkToEmail(this._delegate, email, actionCodeSettings);\n  }\n  sendPasswordResetEmail(\n    email: string,\n    actionCodeSettings?: compat.ActionCodeSettings | null\n  ): Promise<void> {\n    return exp.sendPasswordResetEmail(\n      this._delegate,\n      email,\n      actionCodeSettings || undefined\n    );\n  }\n  async setPersistence(persistence: string): Promise<void> {\n    _validatePersistenceArgument(this._delegate, persistence);\n    let converted;\n    switch (persistence) {\n      case Persistence.SESSION:\n        converted = exp.browserSessionPersistence;\n        break;\n      case Persistence.LOCAL:\n        // Not using isIndexedDBAvailable() since it only checks if indexedDB is defined.\n        const isIndexedDBFullySupported = await exp\n          ._getInstance<exp.PersistenceInternal>(exp.indexedDBLocalPersistence)\n          ._isAvailable();\n        converted = isIndexedDBFullySupported\n          ? exp.indexedDBLocalPersistence\n          : exp.browserLocalPersistence;\n        break;\n      case Persistence.NONE:\n        converted = exp.inMemoryPersistence;\n        break;\n      default:\n        return exp._fail(exp.AuthErrorCode.ARGUMENT_ERROR, {\n          appName: this._delegate.name\n        });\n    }\n\n    return this._delegate.setPersistence(converted);\n  }\n\n  signInAndRetrieveDataWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return this.signInWithCredential(credential);\n  }\n  signInAnonymously(): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInAnonymously(this._delegate)\n    );\n  }\n  signInWithCredential(\n    credential: compat.AuthCredential\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCredential(this._delegate, credential as exp.AuthCredential)\n    );\n  }\n  signInWithCustomToken(token: string): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithCustomToken(this._delegate, token)\n    );\n  }\n  signInWithEmailAndPassword(\n    email: string,\n    password: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailAndPassword(this._delegate, email, password)\n    );\n  }\n  signInWithEmailLink(\n    email: string,\n    emailLink?: string\n  ): Promise<compat.UserCredential> {\n    return convertCredential(\n      this._delegate,\n      exp.signInWithEmailLink(this._delegate, email, emailLink)\n    );\n  }\n  signInWithPhoneNumber(\n    phoneNumber: string,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<compat.ConfirmationResult> {\n    return convertConfirmationResult(\n      this._delegate,\n      exp.signInWithPhoneNumber(\n        this._delegate,\n        phoneNumber,\n        applicationVerifier\n      )\n    );\n  }\n  async signInWithPopup(\n    provider: compat.AuthProvider\n  ): Promise<compat.UserCredential> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n    return convertCredential(\n      this._delegate,\n      exp.signInWithPopup(\n        this._delegate,\n        provider as exp.AuthProvider,\n        CompatPopupRedirectResolver\n      )\n    );\n  }\n  async signInWithRedirect(provider: compat.AuthProvider): Promise<void> {\n    _assert(\n      _isPopupRedirectSupported(),\n      this._delegate,\n      exp.AuthErrorCode.OPERATION_NOT_SUPPORTED\n    );\n\n    await _savePersistenceForRedirect(this._delegate);\n    return exp.signInWithRedirect(\n      this._delegate,\n      provider as exp.AuthProvider,\n      CompatPopupRedirectResolver\n    );\n  }\n  updateCurrentUser(user: compat.User | null): Promise<void> {\n    // remove ts-ignore once overloads are defined for exp functions to accept compat objects\n    // @ts-ignore\n    return this._delegate.updateCurrentUser(user);\n  }\n  verifyPasswordResetCode(code: string): Promise<string> {\n    return exp.verifyPasswordResetCode(this._delegate, code);\n  }\n  unwrap(): exp.Auth {\n    return this._delegate;\n  }\n  _delete(): Promise<void> {\n    return this._delegate._delete();\n  }\n  private linkUnderlyingAuth(): void {\n    (this._delegate as unknown as ReverseWrapper<Auth>).wrapped = () => this;\n  }\n}\n\nfunction wrapObservers(\n  nextOrObserver: Observer<unknown> | ((a: compat.User | null) => unknown),\n  error?: (error: compat.Error) => unknown,\n  complete?: Unsubscribe\n): Partial<Observer<exp.User | null>> {\n  let next = nextOrObserver;\n  if (typeof nextOrObserver !== 'function') {\n    ({ next, error, complete } = nextOrObserver);\n  }\n\n  // We know 'next' is now a function\n  const oldNext = next as (a: compat.User | null) => unknown;\n\n  const newNext = (user: exp.User | null): unknown =>\n    oldNext(user && User.getOrCreate(user as exp.User));\n  return {\n    next: newNext,\n    error: error as ErrorFn,\n    complete\n  };\n}\n\nfunction buildPersistenceHierarchy(\n  apiKey: string,\n  appName: string\n): exp.Persistence[] {\n  // Note this is slightly different behavior: in this case, the stored\n  // persistence is checked *first* rather than last. This is because we want\n  // to prefer stored persistence type in the hierarchy. This is an empty\n  // array if window is not available or there is no pending redirect\n  const persistences = _getPersistencesFromRedirect(apiKey, appName);\n\n  // If \"self\" is available, add indexedDB\n  if (\n    typeof self !== 'undefined' &&\n    !persistences.includes(exp.indexedDBLocalPersistence)\n  ) {\n    persistences.push(exp.indexedDBLocalPersistence);\n  }\n\n  // If \"window\" is available, add HTML Storage persistences\n  if (typeof window !== 'undefined') {\n    for (const persistence of [\n      exp.browserLocalPersistence,\n      exp.browserSessionPersistence\n    ]) {\n      if (!persistences.includes(persistence)) {\n        persistences.push(persistence);\n      }\n    }\n  }\n\n  // Add in-memory as a final fallback\n  if (!persistences.includes(exp.inMemoryPersistence)) {\n    persistences.push(exp.inMemoryPersistence);\n  }\n\n  return persistences;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport firebase from '@firebase/app-compat';\nimport { Compat } from '@firebase/util';\nimport { unwrap } from './wrap';\n\nexport class PhoneAuthProvider\n  implements compat.PhoneAuthProvider, Compat<exp.PhoneAuthProvider>\n{\n  providerId = 'phone';\n  readonly _delegate: exp.PhoneAuthProvider;\n\n  static PHONE_SIGN_IN_METHOD = exp.PhoneAuthProvider.PHONE_SIGN_IN_METHOD;\n  static PROVIDER_ID = exp.PhoneAuthProvider.PROVIDER_ID;\n\n  static credential(\n    verificationId: string,\n    verificationCode: string\n  ): compat.AuthCredential {\n    return exp.PhoneAuthProvider.credential(verificationId, verificationCode);\n  }\n\n  constructor() {\n    // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n    // @ts-ignore\n    this._delegate = new exp.PhoneAuthProvider(unwrap(firebase.auth!()));\n  }\n\n  verifyPhoneNumber(\n    phoneInfoOptions:\n      | string\n      | compat.PhoneSingleFactorInfoOptions\n      | compat.PhoneMultiFactorEnrollInfoOptions\n      | compat.PhoneMultiFactorSignInInfoOptions,\n    applicationVerifier: compat.ApplicationVerifier\n  ): Promise<string> {\n    return this._delegate.verifyPhoneNumber(\n      // The implementation matches but the types are subtly incompatible\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      phoneInfoOptions as any,\n      applicationVerifier\n    );\n  }\n\n  unwrap(): exp.PhoneAuthProvider {\n    return this._delegate;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { FirebaseApp } from '@firebase/app-compat';\nimport * as exp from '@firebase/auth/internal';\nimport * as compat from '@firebase/auth-types';\nimport { Compat } from '@firebase/util';\n\nconst _assert: typeof exp._assert = exp._assert;\n\nexport class RecaptchaVerifier\n  implements compat.RecaptchaVerifier, Compat<exp.ApplicationVerifier>\n{\n  readonly _delegate: exp.RecaptchaVerifier;\n  type: string;\n  constructor(\n    container: HTMLElement | string,\n    parameters?: object | null,\n    app: FirebaseApp = firebase.app()\n  ) {\n    // API key is required for web client RPC calls.\n    _assert(app.options?.apiKey, exp.AuthErrorCode.INVALID_API_KEY, {\n      appName: app.name\n    });\n    this._delegate = new exp.RecaptchaVerifier(\n      container,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parameters as any,\n\n      // TODO: remove ts-ignore when moving types from auth-types to auth-compat\n      // @ts-ignore\n      app.auth!()\n    );\n    this.type = this._delegate.type;\n  }\n  clear(): void {\n    this._delegate.clear();\n  }\n  render(): Promise<number> {\n    return this._delegate.render();\n  }\n  verify(): Promise<string> {\n    return this._delegate.verify();\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable camelcase */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport * as impl from '@firebase/auth/internal';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { FirebaseError } from '@firebase/util';\n\nimport * as types from '@firebase/auth-types';\nimport { name, version } from './package.json';\nimport { Auth } from './src/auth';\nimport { PhoneAuthProvider as CompatAuthProvider } from './src/phone_auth_provider';\nimport { RecaptchaVerifier as CompatRecaptchaVerifier } from './src/recaptcha_verifier';\n\nconst AUTH_TYPE = 'auth-compat';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'auth-compat': types.FirebaseAuth;\n  }\n}\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    auth: {\n      (app?: FirebaseApp): types.FirebaseAuth;\n      Auth: typeof types.FirebaseAuth;\n      EmailAuthProvider: typeof types.EmailAuthProvider;\n      EmailAuthProvider_Instance: typeof types.EmailAuthProvider_Instance;\n      FacebookAuthProvider: typeof types.FacebookAuthProvider;\n      FacebookAuthProvider_Instance: typeof types.FacebookAuthProvider_Instance;\n      GithubAuthProvider: typeof types.GithubAuthProvider;\n      GithubAuthProvider_Instance: typeof types.GithubAuthProvider_Instance;\n      GoogleAuthProvider: typeof types.GoogleAuthProvider;\n      GoogleAuthProvider_Instance: typeof types.GoogleAuthProvider_Instance;\n      OAuthProvider: typeof types.OAuthProvider;\n      SAMLAuthProvider: typeof types.SAMLAuthProvider;\n      PhoneAuthProvider: typeof types.PhoneAuthProvider;\n      PhoneAuthProvider_Instance: typeof types.PhoneAuthProvider_Instance;\n      PhoneMultiFactorGenerator: typeof types.PhoneMultiFactorGenerator;\n      RecaptchaVerifier: typeof types.RecaptchaVerifier;\n      RecaptchaVerifier_Instance: typeof types.RecaptchaVerifier_Instance;\n      TwitterAuthProvider: typeof types.TwitterAuthProvider;\n      TwitterAuthProvider_Instance: typeof types.TwitterAuthProvider_Instance;\n    };\n  }\n  interface FirebaseApp {\n    auth?(): types.FirebaseAuth;\n  }\n}\n\n// Create auth components to register with firebase.\n// Provides Auth public APIs.\nfunction registerAuthCompat(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      AUTH_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app-compat').getImmediate();\n        const authProvider = container.getProvider('auth');\n        return new Auth(app, authProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setServiceProps({\n        ActionCodeInfo: {\n          Operation: {\n            EMAIL_SIGNIN: impl.ActionCodeOperation.EMAIL_SIGNIN,\n            PASSWORD_RESET: impl.ActionCodeOperation.PASSWORD_RESET,\n            RECOVER_EMAIL: impl.ActionCodeOperation.RECOVER_EMAIL,\n            REVERT_SECOND_FACTOR_ADDITION:\n              impl.ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION,\n            VERIFY_AND_CHANGE_EMAIL:\n              impl.ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL,\n            VERIFY_EMAIL: impl.ActionCodeOperation.VERIFY_EMAIL\n          }\n        },\n        EmailAuthProvider: impl.EmailAuthProvider,\n        FacebookAuthProvider: impl.FacebookAuthProvider,\n        GithubAuthProvider: impl.GithubAuthProvider,\n        GoogleAuthProvider: impl.GoogleAuthProvider,\n        OAuthProvider: impl.OAuthProvider,\n        SAMLAuthProvider: impl.SAMLAuthProvider,\n        PhoneAuthProvider: CompatAuthProvider,\n        PhoneMultiFactorGenerator: impl.PhoneMultiFactorGenerator,\n        RecaptchaVerifier: CompatRecaptchaVerifier,\n        TwitterAuthProvider: impl.TwitterAuthProvider,\n        Auth,\n        AuthCredential: impl.AuthCredential,\n        Error: FirebaseError\n      })\n      .setInstantiationMode(InstantiationMode.LAZY)\n      .setMultipleInstances(false)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterAuthCompat(firebase as _FirebaseNamespace);\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}